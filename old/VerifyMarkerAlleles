--
-- VerifyMarkerAlleles
--
-- Determines is Marker contains non-Approved Alleles
-- Displays message if it does
--
-- If Text, assumes use of mgiMarker template
-- If Table, assumes table.markerKey, table.markerSymbol are defined
--

	VerifyMarkerAlleles does
	  sourceWidget : widget := VerifyMarkerAlleles.source_widget;
	  top : widget := sourceWidget.top;
	  isTable : boolean;
	  value : string;
	  select : string;

	  -- These variables are only relevant for Tables
	  row : integer;
	  column : integer;
	  reason : integer;

	  (void) busy_cursor(top);

	  isTable := mgi_tblIsTable(sourceWidget);

	  -- Processing for Table

	  if (isTable) then
	    row := VerifyMarkerAlleles.row;
	    column := VerifyMarkerAlleles.column;
	    reason := VerifyMarkerAlleles.reason;

	    if (reason = TBL_REASON_VALIDATE_CELL_END) then
	      (void) reset_cursor(top);
	      return;
	    end if;
					   
	    -- If not in the marker column, return

            if (column != sourceWidget.markerSymbol) then
	      (void) reset_cursor(top);
              return;
            end if;

	    value := mgi_tblGetCell(sourceWidget, row, sourceWidget.markerKey);

	  -- Processing for Text

	  else
	    value := top->mgiMarker->ObjectID->text.value;
	  end if;

	  if (value.length = 0 or value = "NULL") then
	    (void) reset_cursor(top);
	    return;
	  end if;

	  select := "select count(a._Allele_key) from ALL_Allele a, VOC_Term t " +
	  	"where a._Marker_key = " + value + 
	  	" and a._Allele_Status_key = t._Term_key" +
		" and term not in (" + 
		  mgi_DBprstr(ALL_STATUS_APPROVED) + "," +
		  mgi_DBprstr(ALL_STATUS_AUTOLOAD) + ")";

          if ((integer) mgi_sql1(select) > 0) then
                StatusReport.source_widget := top.root;
                StatusReport.message := "This Marker has non-Approved Allele Symbols.\n" +
			"Please check these records before entering your new Allele Symbol.\n";
                send(StatusReport);
          end if;

	  (void) reset_cursor(top);
	end does;

