--
-- VerifyYesNo
--
--	Verify Y/N/y/n/Yes/No/yes/no entered
--	If Table, assumes table.yesnoKey UDA
--

	VerifyYesNo does
	  table : widget := VerifyYesNo.source_widget;
	  top : widget := table.top;
	  row : integer := VerifyYesNo.row;
	  column : integer := VerifyYesNo.column;
	  reason : integer := VerifyYesNo.reason;
	  value : string := VerifyYesNo.value.lower_case;

	  -- If not in the Yes/No, return

	  if (column != table.yesno) then
	    return;
	  end if;

	  if (reason = TBL_REASON_VALIDATE_CELL_END) then
	    return;
	  end if;

	  (void) busy_cursor(top);

	  -- If the Yes/No is null, default to Yes

	  if (value.length = 0) then
	    value := "yes";
	    (void) mgi_tblSetCell(table, row, table.yesno, "yes");
	  end if;

	  if (value != "y" and value != "n" and value != "yes" and value != "no") then
            StatusReport.source_widget := top.root;
            StatusReport.message := "Invalid Yes/No Value";
            send(StatusReport);
	    VerifyYesNo.doit := false;
	  else
	    if (value[1] = 'y') then
	      value := "yes";
	      (void) mgi_tblSetCell(table, row, table.yesno, "yes");
	    else
	      value := "no";
	      (void) mgi_tblSetCell(table, row, table.yesno, "no");
	    end if;
	  end if;

	  (void) reset_cursor(top);
	end does;

