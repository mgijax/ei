
# 
# Makefile generated by TeleUSE 'uxb' tool
# File: 'Makefile' generated: Tue Feb 14 09:59:27 2017
# Target: linux
# 

BIN = $$TeleUSE/bin
GUID = $(BIN)/uxb_guid
GMAIN = $(BIN)/uxb_gmain
SC_RETURN = $(BIN)/uxb_scret -v
SC_INIT = $(BIN)/uxb_scinit -v
SC_LIST = $(BIN)/uxb_sclst
SC_UPDATE = $(BIN)/uxb_scupd
CPP = /lib/cpp -I/usr/X11R6/include
MAKE = make
CC = gcc -DUSE_MOTIF2_0 -I/usr/X11R6/include
UIL = /usr/bin/uil
CPLUSPLUS = c++ -I/usr/X11R6/include
CFLAGS =
RM = rm -f
AR = ar
MV = mv
RANLIB = ranlib
GCOMP = $(BIN)/uxb_gcomp
CP = cp
DLC = $(BIN)/dlc
FLG = $(BIN)/dl_flg -real_stubs
GUINIT = $(BIN)/uxb_guinit
SHELL = /bin/sh
TOUCH = touch
CCFLAGS =

CSOURCE = \
 ../csrc/pglib.c     ../csrc/utilities.c ../csrc/tables.c \
 ../csrc/mgilib.c    ../csrc/mgisql.c    ../csrc/mgdsql.c \
 ../csrc/gxdsql.c    ../csrc/xrt_conv.c  

INCLUDES = -I$$TeleUSE/include -I$$POSTGRES_HOME/include \
  -I$$XRTHOME/include -I../include -I$$XRTHOME/src/tools

D_INCLUDES = -I$$XRTHOME/include -I$$POSTGRES_HOME/include \
  -I$$TeleUSE/include -I../include

LIBS = $$TeleUSE/lib/xm_c.o -L$$TeleUSE/lib -ld_wr -ld -lpcd \
  -lXtwit -lXmwit $$TeleUSE/lib/libXrtwit.a -lteleuse \
  -L$$XRTHOME/lib -lxrtfield -lxrtgear -lxrtm -lxrt3d -lxrttable \
  -lxrtgauge -lpdsutil -lXpm -lMrm -Xlinker -Bdynamic -lXm -lXt \
  -lXext -lX11 -lSM -lICE -lm

STD_AIM = -Auflib -Axt_c -Axm_c -Afork

DEVENT_FILES = \
 ../dsrc/AccLib.de \
 ../dsrc/Clipboard.de \
 ../dsrc/DateLib.de \
 ../dsrc/DictionaryLib.de \
 ../dsrc/DynamicLib.de \
 ../dsrc/Genotype.de \
 ../dsrc/InSituResult.de \
 ../dsrc/Lib.de \
 ../dsrc/List.de \
 ../dsrc/MGILib.de \
 ../dsrc/MolSourceLib.de \
 ../dsrc/NoteLib.de \
 ../dsrc/PythonLib.de \
 ../dsrc/RefTypeTableLib.de \
 ../dsrc/RefAlleleTableLib.de \
 ../dsrc/RefMarkerTableLib.de \
 ../dsrc/SQL.de \
 ../dsrc/StrainAlleleTypeTableLib.de \
 ../dsrc/SynTypeTableLib.de \
 ../dsrc/Table.de \
 ../dsrc/Verify.de 

AIM_FILES = \
 ../aim/postgres.aim  ../aim/tables.aim    ../aim/utilities.aim \
 ../aim/xrt.aim       ../aim/mgi.aim       ../aim/mgisql.aim \
 ../aim/mgdsql.aim    ../aim/gxdsql.aim    

D_DEPENDENCIES =  $(DEVENT_FILES) $(AIM_FILES)

all: interpreted_d gxd GXD user-post
	@echo uxb done

user-post:
	@$(MAKE) -f ${XRTMAKE} xrt_auth

pglib.o: ../csrc/pglib.c
	@echo "C-compiling '../csrc/pglib.c'"
	@$(CC) -c  $(CFLAGS) -g -I. $(INCLUDES) ../csrc/pglib.c

utilities.o: ../csrc/utilities.c
	@echo "C-compiling '../csrc/utilities.c'"
	@$(CC) -c  $(CFLAGS) -g -I. $(INCLUDES) ../csrc/utilities.c

tables.o: ../csrc/tables.c
	@echo "C-compiling '../csrc/tables.c'"
	@$(CC) -c  $(CFLAGS) -g -I. $(INCLUDES) ../csrc/tables.c

mgilib.o: ../csrc/mgilib.c
	@echo "C-compiling '../csrc/mgilib.c'"
	@$(CC) -c  $(CFLAGS) -g -I. $(INCLUDES) ../csrc/mgilib.c

mgisql.o: ../csrc/mgisql.c
	@echo "C-compiling '../csrc/mgisql.c'"
	@$(CC) -c  $(CFLAGS) -g -I. $(INCLUDES) ../csrc/mgisql.c

mgdsql.o: ../csrc/mgdsql.c
	@echo "C-compiling '../csrc/mgdsql.c'"
	@$(CC) -c  $(CFLAGS) -g -I. $(INCLUDES) ../csrc/mgdsql.c

gxdsql.o: ../csrc/gxdsql.c
	@echo "C-compiling '../csrc/gxdsql.c'"
	@$(CC) -c  $(CFLAGS) -g -I. $(INCLUDES) ../csrc/gxdsql.c

xrt_conv.o: ../csrc/xrt_conv.c
	@echo "C-compiling '../csrc/xrt_conv.c'"
	@$(CC) -c  $(CFLAGS) -g -I. $(INCLUDES) ../csrc/xrt_conv.c

AccLib.do: $(D_DEPENDENCIES) ../dsrc/AccLib.d
	@echo "Compiling interpreted module '../dsrc/AccLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/AccLib.d

Allele.do: $(D_DEPENDENCIES) ../dsrc/Allele.d
	@echo "Compiling interpreted module '../dsrc/Allele.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Allele.d

Antigen.do: $(D_DEPENDENCIES) ../dsrc/Antigen.d
	@echo "Compiling interpreted module '../dsrc/Antigen.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Antigen.d

Antibody.do: $(D_DEPENDENCIES) ../dsrc/Antibody.d
	@echo "Compiling interpreted module '../dsrc/Antibody.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Antibody.d

Assay.do: $(D_DEPENDENCIES) ../dsrc/Assay.d
	@echo "Compiling interpreted module '../dsrc/Assay.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Assay.d

Clipboard.do: $(D_DEPENDENCIES) ../dsrc/Clipboard.d
	@echo "Compiling interpreted module '../dsrc/Clipboard.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Clipboard.d

ControlledVocab.do: $(D_DEPENDENCIES) ../dsrc/ControlledVocab.d
	@echo "Compiling interpreted module '../dsrc/ControlledVocab.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/ControlledVocab.d

DateLib.do: $(D_DEPENDENCIES) ../dsrc/DateLib.d
	@echo "Compiling interpreted module '../dsrc/DateLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/DateLib.d

DictionaryLib.do: $(D_DEPENDENCIES) ../dsrc/DictionaryLib.d
	@echo "Compiling interpreted module '../dsrc/DictionaryLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/DictionaryLib.d

DynamicLib.do: $(D_DEPENDENCIES) ../dsrc/DynamicLib.d
	@echo "Compiling interpreted module '../dsrc/DynamicLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/DynamicLib.d

Genotype.do: $(D_DEPENDENCIES) ../dsrc/Genotype.d
	@echo "Compiling interpreted module '../dsrc/Genotype.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Genotype.d

GXD.do: $(D_DEPENDENCIES) ../dsrc/GXD.d
	@echo "Compiling interpreted module '../dsrc/GXD.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/GXD.d

Image.do: $(D_DEPENDENCIES) ../dsrc/Image.d
	@echo "Compiling interpreted module '../dsrc/Image.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Image.d

InSituResult.do: $(D_DEPENDENCIES) ../dsrc/InSituResult.d
	@echo "Compiling interpreted module '../dsrc/InSituResult.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/InSituResult.d

IndexStage.do: $(D_DEPENDENCIES) ../dsrc/IndexStage.d
	@echo "Compiling interpreted module '../dsrc/IndexStage.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/IndexStage.d

Lib.do: $(D_DEPENDENCIES) ../dsrc/Lib.d
	@echo "Compiling interpreted module '../dsrc/Lib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Lib.d

List.do: $(D_DEPENDENCIES) ../dsrc/List.d
	@echo "Compiling interpreted module '../dsrc/List.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/List.d

MGILib.do: $(D_DEPENDENCIES) ../dsrc/MGILib.d
	@echo "Compiling interpreted module '../dsrc/MGILib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/MGILib.d

Molecular.do: $(D_DEPENDENCIES) ../dsrc/Molecular.d
	@echo "Compiling interpreted module '../dsrc/Molecular.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Molecular.d

MolecularSource.do: $(D_DEPENDENCIES) ../dsrc/MolecularSource.d
	@echo "Compiling interpreted module '../dsrc/MolecularSource.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/MolecularSource.d

MolSourceLib.do: $(D_DEPENDENCIES) ../dsrc/MolSourceLib.d
	@echo "Compiling interpreted module '../dsrc/MolSourceLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/MolSourceLib.d

MutantCellLine.do: $(D_DEPENDENCIES) ../dsrc/MutantCellLine.d
	@echo "Compiling interpreted module '../dsrc/MutantCellLine.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/MutantCellLine.d

NonMutantCellLine.do: $(D_DEPENDENCIES) ../dsrc/NonMutantCellLine.d
	@echo "Compiling interpreted module '../dsrc/NonMutantCellLine.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/NonMutantCellLine.d

NoteLib.do: $(D_DEPENDENCIES) ../dsrc/NoteLib.d
	@echo "Compiling interpreted module '../dsrc/NoteLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/NoteLib.d

PythonLib.do: $(D_DEPENDENCIES) ../dsrc/PythonLib.d
	@echo "Compiling interpreted module '../dsrc/PythonLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/PythonLib.d

RefTypeTableLib.do: $(D_DEPENDENCIES) ../dsrc/RefTypeTableLib.d
	@echo "Compiling interpreted module '../dsrc/RefTypeTableLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/RefTypeTableLib.d

Reference.do: $(D_DEPENDENCIES) ../dsrc/Reference.d
	@echo "Compiling interpreted module '../dsrc/Reference.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Reference.d

RefAlleleTableLib.do: $(D_DEPENDENCIES) ../dsrc/RefAlleleTableLib.d
	@echo "Compiling interpreted module '../dsrc/RefAlleleTableLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/RefAlleleTableLib.d

RefMarkerTableLib.do: $(D_DEPENDENCIES) ../dsrc/RefMarkerTableLib.d
	@echo "Compiling interpreted module '../dsrc/RefMarkerTableLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/RefMarkerTableLib.d

Report.do: $(D_DEPENDENCIES) ../dsrc/Report.d
	@echo "Compiling interpreted module '../dsrc/Report.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Report.d

SimpleVocab.do: $(D_DEPENDENCIES) ../dsrc/SimpleVocab.d
	@echo "Compiling interpreted module '../dsrc/SimpleVocab.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/SimpleVocab.d

SQL.do: $(D_DEPENDENCIES) ../dsrc/SQL.d
	@echo "Compiling interpreted module '../dsrc/SQL.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/SQL.d

Strains.do: $(D_DEPENDENCIES) ../dsrc/Strains.d
	@echo "Compiling interpreted module '../dsrc/Strains.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Strains.d

StrainAlleleTypeTableLib.do: $(D_DEPENDENCIES) ../dsrc/StrainAlleleTypeTableLib.d
	@echo "Compiling interpreted module '../dsrc/StrainAlleleTypeTableLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/StrainAlleleTypeTableLib.d

SynTypeTableLib.do: $(D_DEPENDENCIES) ../dsrc/SynTypeTableLib.d
	@echo "Compiling interpreted module '../dsrc/SynTypeTableLib.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/SynTypeTableLib.d

Table.do: $(D_DEPENDENCIES) ../dsrc/Table.d
	@echo "Compiling interpreted module '../dsrc/Table.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Table.d

Verify.do: $(D_DEPENDENCIES) ../dsrc/Verify.d
	@echo "Compiling interpreted module '../dsrc/Verify.d' d->do"
	@$(DLC) -do -debug -p $(D_INCLUDES) $(D_DEPENDENCIES) $(STD_AIM) ../dsrc/Verify.d

uxb_flg.c: $(AIM_FILES)
	@echo "Generating function list file 'uxb_flg.c'"
	@$(FLG) -func uxb_mainc_declare_fl -o uxb_flg.c $(AIM_FILES)

uxb_flg.o: uxb_flg.c
	@echo "Compiling function list file 'uxb_flg.c'"
	@$(CC) -c  $(CFLAGS) -I. $(INCLUDES) uxb_flg.c

uxb_mainc.c: uxb_mainc.arg
	@echo "Generating C component file 'uxb_mainc.c'"
	@$(GCOMP) -conf uxb_mainc.arg -o uxb_mainc.c

uxb_mainc.o: uxb_mainc.c
	@echo "Compiling C component file 'uxb_mainc.c'"
	@$(CC) -c  $(CFLAGS) -I. $(INCLUDES) uxb_mainc.c

uxb_main.c: uxb_main.arg
	@echo "Generating C main file 'uxb_main.c'"
	@$(GMAIN) -conf uxb_main.arg -o uxb_main.c

uxb_main.o: uxb_main.c
	@echo "Compiling C main file 'uxb_main.c'"
	@$(CC) -c  $(CFLAGS) -g -I. $(INCLUDES) uxb_main.c

XRES_FILES = \
 ../XRes.in 

GXD: $(XRES_FILES)
	@echo "Generating X resource file 'GXD'"
	@$(RM) GXD
	@cat $(XRES_FILES) > GXD

APPL_LIBS = \
 $$TeleUSE/lib/libhelp.a -L$(XRTHOME)/src/tools \
 -ltools                -lm \
 -L$${POSTGRES_HOME}/lib -lpq 

D_OBJECTS = \
 uxb_flg.o 

APPL_OBJECTS = \
 pglib.o     utilities.o tables.o    mgilib.o    mgisql.o \
 mgdsql.o    gxdsql.o    xrt_conv.o  

GEN_OBJECTS = \
 uxb_mainc.o uxb_main.o  

gxd: $(D_OBJECTS) $(APPL_OBJECTS) $(GEN_OBJECTS)
	@echo Building executable file
	@$(CC) -g -o gxd $(GEN_OBJECTS) $(D_OBJECTS) $(APPL_OBJECTS) $(APPL_LIBS) $(LIBS)
	@echo "Executable 'gxd' made"


INTERPRETED_D = \
 AccLib.do                   Allele.do \
 Antigen.do                  Antibody.do \
 Assay.do                    Clipboard.do \
 ControlledVocab.do          DateLib.do \
 DictionaryLib.do            DynamicLib.do \
 Genotype.do                 GXD.do \
 Image.do                    InSituResult.do \
 IndexStage.do               Lib.do \
 List.do                     MGILib.do \
 Molecular.do                MolecularSource.do \
 MolSourceLib.do             MutantCellLine.do \
 NonMutantCellLine.do        NoteLib.do \
 PythonLib.do                RefTypeTableLib.do \
 Reference.do                RefAlleleTableLib.do \
 RefMarkerTableLib.do        Report.do \
 SimpleVocab.do              SQL.do \
 Strains.do                  StrainAlleleTypeTableLib.do \
 SynTypeTableLib.do          Table.do \
 Verify.do                   

interpreted_d: $(INTERPRETED_D)

clean::
	@$(RM) Makefile
	@$(RM) pglib.o
	@$(RM) utilities.o
	@$(RM) tables.o
	@$(RM) mgilib.o
	@$(RM) mgisql.o
	@$(RM) mgdsql.o
	@$(RM) gxdsql.o
	@$(RM) xrt_conv.o
	@$(RM) uxb_flg.c
	@$(RM) uxb_flg.o
	@$(RM) uxb_mainc.c
	@$(RM) uxb_mainc.arg
	@$(RM) uxb_mainc.o
	@$(RM) uxb_main.c
	@$(RM) uxb_main.arg
	@$(RM) uxb_main.o
	@$(MAKE) -f ${XRTMAKE} clean

delete:: clean
	@$(RM) AccLib.do
	@$(RM) Allele.do
	@$(RM) Antigen.do
	@$(RM) Antibody.do
	@$(RM) Assay.do
	@$(RM) Clipboard.do
	@$(RM) ControlledVocab.do
	@$(RM) DateLib.do
	@$(RM) DictionaryLib.do
	@$(RM) DynamicLib.do
	@$(RM) Genotype.do
	@$(RM) GXD.do
	@$(RM) Image.do
	@$(RM) InSituResult.do
	@$(RM) IndexStage.do
	@$(RM) Lib.do
	@$(RM) List.do
	@$(RM) MGILib.do
	@$(RM) Molecular.do
	@$(RM) MolecularSource.do
	@$(RM) MolSourceLib.do
	@$(RM) MutantCellLine.do
	@$(RM) NonMutantCellLine.do
	@$(RM) NoteLib.do
	@$(RM) PythonLib.do
	@$(RM) RefTypeTableLib.do
	@$(RM) Reference.do
	@$(RM) RefAlleleTableLib.do
	@$(RM) RefMarkerTableLib.do
	@$(RM) Report.do
	@$(RM) SimpleVocab.do
	@$(RM) SQL.do
	@$(RM) Strains.do
	@$(RM) StrainAlleleTypeTableLib.do
	@$(RM) SynTypeTableLib.do
	@$(RM) Table.do
	@$(RM) Verify.do
	@$(RM) gxd.ui
	@$(RM) GXD
	@$(RM) gxd
	@$(MAKE) -f ${XRTMAKE} delete

