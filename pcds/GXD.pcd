Module: GXD
{
      autoCuil = false;
      dDialogFile = "gxd_dlg.d";
      release = "TeleUSE v3.2.3 / Solaris 8";
      lastWritten = "Tue Sep 24 12:50:19 2013";
      copy = false;
      inCreateMenu = true;
        {
          AntigenModule = Module : MGI;
          Group: Control
            vip_x = 175;
            vip_y = 85;
          Group: User
            clearForms = "ControlForm\nEditForm\nSourceForm";
            homeWidget = Name;
            editForms = "ControlForm\nEditForm\nSourceForm";
            activateButtonName = Antigen;
              {
                MainForm = XmForm;
                    {
                      MainMenu = MainMenu;
                          {
                            File = File;
                          }
                          {
                            Commands = Commands : mgiMenu;
                                Popups:
                                {
                                  CommandsPulldown = MenuPulldown : mgiMenu;
                                      {
                                        Search = MenuPush : mgiMenu;
                                      }
                                      {
                                        Modify = MenuPush : mgiMenu;
                                      }
                                      {
                                        Add = MenuPush : mgiMenu;
                                      }
                                      {
                                        Delete = MenuPush : mgiMenu;
                                      }
                                      {
                                        separator1 = XmSeparator;
                                      }
                                      {
                                        Clear = MenuPush : mgiMenu;
                                        Group: Widget
                                          activateCallback = "D:Clear(clearLists = 3)";
                                      }
                                }
                          }
                          {
                            Edit = Edit : mgiMenu;
                          }
                          {
                            View = View : mgiMenu;
                            Group: Widget
                              managed = True;
                                Popups:
                                {
                                  ViewPulldown = MenuPulldown : mgiMenu;
                                      {
                                        Strain = MenuPush : mgiMenu;
                                        Group: Widget
                                          managed = True;
                                      }
                                      {
                                        Tissue = MenuPush : mgiMenu;
                                        Group: Widget
                                          managed = True;
                                      }
                                }
                          }
                    }
                    {
                      Edit = XmFrame;
                          {
                            EditForm = EditForm : MGI;
                            Group: Widget
                              rubberPositioning = False;
                              resizePolicy = resize_any;
                                {
                                  ID = ID;
                                }
                                {
                                  Name = CharText : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_form;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftOffset = 5;
                                      {
                                        label = XmLabel;
                                        Group: Widget
                                          labelString = Name;
                                      }
                                      {
                                        text = text;
                                        Group: Widget
                                          columns = 75;
                                        Group: User
                                          required = True;
                                      }
                                }
                                {
                                  Region = CharText : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = Name;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = Name;
                                    topOffset = 2;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        label = XmLabel;
                                        Group: Widget
                                          labelString = "Region\nCovered";
                                      }
                                      {
                                        text = text;
                                        Group: Widget
                                          columns = 75;
                                      }
                                }
                                {
                                  Note = Notes : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = Region;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = Region;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        label = XmLabel;
                                      }
                                      {
                                        text = scrolledText : mgiDataTypes;
                                        Group: Widget
                                          columns = 75;
                                      }
                                }
                                {
                                  separatorGadget = XmSeparatorGadget;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = Note;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  SourceForm = SourceForm : MGI;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = separatorGadget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        SourceID : ID = ID : mgiDataTypes;
                                      }
                                      {
                                        Library = CharText : mgiDataTypes;
                                      }
                                      {
                                        mgiCitation = mgiCitation : mgiDataTypes;
                                      }
                                      {
                                        SourceSegmentTypeMenu = SegmentTypeMenu : mgiOption;
                                        Group: User
                                          required = False;
                                      }
                                      {
                                        SourceVectorTypeMenu = VectorTypeMenu : mgiOption;
                                        Group: User
                                          required = False;
                                      }
                                      {
                                        ProbeOrganismMenu = ProbeOrganismMenu : mgiOption;
                                        Group: Widget
                                          subMenuId = ProbeOrganismPulldown;
                                            Popups:
                                            {
                                              ProbeOrganismPulldown = OptionPulldown;
                                              Group: User
                                                sql = "select s.*\nfrom MGI_Organism s, MGI_Organism_MGIType t\nwhere s._Organism_key = t._Organism_key\nand t._MGIType_key = 7\norder by s.commonName";
                                            }
                                      }
                                      {
                                        ViewAttributeHistory = push;
                                      }
                                      {
                                        Strain = Strain : mgiDataTypes;
                                        Group: Constraint
                                          leftWidget = ProbeOrganismMenu;
                                          topWidget = ProbeOrganismMenu;
                                      }
                                      {
                                        Tissue = Tissue : mgiDataTypes;
                                      }
                                      {
                                        Description = CharText : mgiDataTypes;
                                      }
                                      {
                                        CellLine = mgiVerify : mgiDataTypes;
                                      }
                                      {
                                        AgeMenu = AgeMenu : mgiOption;
                                      }
                                      {
                                        Age = CharText : mgiDataTypes;
                                      }
                                      {
                                        GenderMenu = GenderMenu : mgiOption;
                                      }
                                      {
                                        mgiNoteForm = mgiNoteForm : mgiDataTypes;
                                      }
                                      {
                                        CloneLibrarySet = Table : mgiTable;
                                            {
                                              Table = mgiTable : mgiTable;
                                              Group: Widget
                                                xrtTblColumnLabels = "Mode,Current Key,Key,Strain Type";
                                                xrtTblNumColumns = 4;
                                                xrtTblCharWidthSeries = "(all 0 1)(all 1-2 10)(all 3 50)";
                                                xrtTblEditableSeries = "(all 0-2 False)";
                                                xrtTblPixelWidthSeries = "(all 0-2 0)";
                                                userDefinedAttributes = "strainTypeCurrentKey:Int=\"1\"\nstrainTypeKey:Int=\"2\"\nstrainType:Int=\"3\"\n";
                                                xrtTblVisibleRows = 3;
                                            }
                                      }
                                }
                                {
                                  separatorGadget1 = XmSeparatorGadget;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = SourceForm;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  Antibody = Table : mgiTable;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = separatorGadget1;
                                    bottomAttachment = attach_form;
                                    resizable = true;
                                    leftOffset = 5;
                                    bottomOffset = 5;
                                    topOffset = 5;
                                      {
                                        Table = mgiTable : mgiTable;
                                        Group: Widget
                                          xrtTblNumColumns = 3;
                                          xrtTblColumnLabels = "Mode,Acc ID,Antibody";
                                          xrtTblCharWidthSeries = "(all 0 1)(all 1 30)(all 2 50)";
                                          userDefinedAttributes = "antibody:Int(Int)=\"2\"\naccID:Int=\"1\"\n";
                                      }
                                      {
                                        AddRow = TablePush : mgiTable;
                                        Group: Widget
                                          managed = False;
                                      }
                                      {
                                        DeleteRow = TablePush : mgiTable;
                                        Group: Widget
                                          managed = False;
                                      }
                                }
                          }
                    }
                    {
                      Control = Control;
                          {
                            ControlForm = XmForm;
                            Group: Widget
                              rubberPositioning = False;
                              resizePolicy = resize_any;
                                {
                                  Search = ControlPush;
                                }
                                {
                                  Clear = ControlPush;
                                  Group: Widget
                                    activateCallback = "D:Clear(clearLists = 3)";
                                }
                                {
                                  Modify = ControlPush;
                                }
                                {
                                  Add = ControlPush;
                                }
                                {
                                  Delete = ControlPush;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = Add;
                                    leftOffset = 2;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = Add;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  Previous = ControlArrow;
                                }
                                {
                                  Next = ControlArrow;
                                }
                                {
                                  Bottom = ControlArrow : mgiControl;
                                }
                                {
                                  Clear1 = XmMenuBar;
                                }
                                {
                                  RecordCount = RecordCount : mgiDataTypes;
                                }
                                {
                                  CreationDate = CreationDate : mgiDataTypes;
                                  Group: Widget
                                    managed = False;
                                }
                                {
                                  ModifiedDate = ModifiedDate : mgiDataTypes;
                                  Group: Widget
                                    managed = False;
                                }
                                {
                                  ModificationHistory = ModificationHistory : mgiTable;
                                  Group: Widget
                                    managed = True;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = Search;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = RecordCount;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        Table = mgiTable : mgiTable;
                                        Group: Widget
                                          xrtTblNumRows = 2;
                                      }
                                }
                          }
                    }
                    {
                      Lookup = Lookup;
                          {
                            panedWindow = XmPanedWindow;
                                {
                                  mgiAccessionTable = mgiAccessionTable : mgiTable;
                                      {
                                        Table = mgiTable;
                                      }
                                      {
                                        Add = TablePush;
                                        Group: Widget
                                          managed = False;
                                      }
                                      {
                                        Delete = TablePush;
                                        Group: Widget
                                          managed = False;
                                      }
                                      {
                                        AccSourceMenu = AccSourceMenu;
                                        Group: Widget
                                          managed = False;
                                            Popups:
                                            {
                                              AccSourcePulldown = OptionPulldown;
                                                  {
                                                    MGI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MRK = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    J = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    PubMed = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    DXDOI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NSequence = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EnsemblGeneModel = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EnsemblProtein = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EnsemblTranscript = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RefSeq = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    SWISSPROT = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TrEMBL = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    VEGAGeneModel = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    VEGAProtein = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    VEGATranscript = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    AllenBrainAtlas = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Affy1 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Affy430 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    AffyU74 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ArrayExpress = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CCDS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    DFCI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    DOTS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    FuncBase = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HomoloGene = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    miRBase = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIAGeneIndex = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    PDB = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ProteinOntology = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENCluster = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENClone = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENFANTOM = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    UniGene = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    QTLArchive = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    InterPro = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IMAGE = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MGC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    WashU = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ATCC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MGIImage = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BGEM = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    GUDMAP = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CREX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HYEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    INEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    FSEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TEXT = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TXEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    PMEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    E = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HGNC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    OMIM = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RGD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIA = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIA7 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIA15K = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RPCI23 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RPCI24 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    UniSTS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BROAD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Taxon = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    JRS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MMRRC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    APB = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BCBC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CARD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CMMR = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EMMA = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EMS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Harwell = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    JPGA = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMP = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NCIMR = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MTG = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MUGEN = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIG = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NMICE = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    OBS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ORNL = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENBRC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TAC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RMRC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    WTSI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IMAGELibrary = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    dbESTLibrary = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IGTC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    LexiconGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BayGenomicGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TexasGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TIGEMGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ModellingHumanGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ESCDGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ExchangeableClonesGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    GermanGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    SangerGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HutchinsonGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPRegeneron = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPCSD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RegeneronOther = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPRegeneronProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPCSDProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NORCOMMProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EUCOMMProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Genentech = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EUCOMMCellLine = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EUCOMMSequenceType = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RuleyHECellLine = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IshidaYCellLine = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Lexicon = AccToggle : mgiOption;
                                                  }
                                            }
                                      }
                                }
                          }
                    }
                    Popups:
                    {
                      StatusDialog = StatusDialog : mgiDialog;
                    }
                    {
                      DeleteDialog = DeleteDialog : mgiDialog;
                    }
                    {
                      ReportDialog = ReportDialog : mgiDialog;
                          {
                            FileSelection = FileSelection;
                          }
                          {
                            Lookup = XmFrame;
                                {
                                  panedWindow = XmPanedWindow;
                                      {
                                        ReportList = LookupList : mgiLookup;
                                      }
                                      {
                                        PrinterList = LookupList;
                                      }
                                      {
                                        PrintOrient = Choice : mgiDataTypes;
                                            {
                                              PrintOrientBox : ChoiceBox = XmRowColumn;
                                                  {
                                                    Portrait = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      set = True;
                                                      labelString = Portrait;
                                                  }
                                                  {
                                                    Landscape = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      labelString = Landscape;
                                                  }
                                            }
                                      }
                                      {
                                        PrintColumn = Choice : mgiDataTypes;
                                            {
                                              PrintColumnBox : ChoiceBox = XmRowColumn;
                                                  {
                                                    OneColumn = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      set = True;
                                                      labelString = "1 column";
                                                  }
                                                  {
                                                    TwoColumn = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      labelString = "2 column";
                                                  }
                                            }
                                      }
                                }
                          }
                    }
              }
        }
        {
          AntibodyModule = Module : MGI;
          Group: Control
            vip_x = 175;
            vip_y = 30;
          Group: User
            clearForms = "ControlForm\nEditForm\nSourceForm";
            homeWidget = Name;
            activateButtonName = Antibody;
              {
                MainForm = XmForm;
                    {
                      MainMenu = MainMenu;
                          {
                            File = File;
                          }
                          {
                            Commands = Commands : mgiMenu;
                                Popups:
                                {
                                  CommandsPulldown = MenuPulldown : mgiMenu;
                                      {
                                        Search = MenuPush : mgiMenu;
                                      }
                                      {
                                        Modify = MenuPush : mgiMenu;
                                      }
                                      {
                                        Add = MenuPush : mgiMenu;
                                      }
                                      {
                                        Delete = MenuPush : mgiMenu;
                                      }
                                      {
                                        separator1 = XmSeparator;
                                      }
                                      {
                                        Clear = MenuPush : mgiMenu;
                                        Group: Widget
                                          activateCallback = "D:ClearAntibody";
                                      }
                                }
                          }
                    }
                    {
                      Edit = XmFrame;
                          {
                            EditForm = EditForm : MGI;
                            Group: Widget
                              rubberPositioning = False;
                              resizePolicy = resize_any;
                                {
                                  ID = ID;
                                }
                                {
                                  Name = CharText : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    leftOffset = 5;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_form;
                                    topOffset = 2;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        label = XmLabel;
                                        Group: Widget
                                          labelString = Name;
                                      }
                                      {
                                        text = text;
                                        Group: Widget
                                          columns = 85;
                                        Group: User
                                          required = True;
                                      }
                                }
                                {
                                  AntibodyTypeMenu = AntibodyTypeMenu : mgiOption;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = Name;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = Name;
                                    topOffset = 2;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  AntibodyClassMenu = AntibodyClassMenu : mgiOption;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = AntibodyTypeMenu;
                                    leftOffset = 10;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = AntibodyTypeMenu;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  AntibodyOrganismMenu = AntibodyOrganismMenu : mgiOption;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = AntibodyClassMenu;
                                    leftOffset = 10;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = AntibodyClassMenu;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  WesternMenu = WesternMenu : mgiOption;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = AntibodyTypeMenu;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = AntibodyTypeMenu;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  ImmunoMenu = ImmunoMenu : mgiOption;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = WesternMenu;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = WesternMenu;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  separator = XmSeparator;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = ImmunoMenu;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  AntigenAccession = mgiAccession : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = ImmunoMenu;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = separator;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                  Group: User
                                    tableID = 200;
                                      {
                                        ObjectID = ID;
                                            {
                                              label = XmLabel;
                                            }
                                            {
                                              text = text;
                                              Group: Widget
                                                valueChangedCallback = "D:SetModify\nD:DisplayMolecularSource";
                                              Group: User
                                                required = True;
                                            }
                                      }
                                      {
                                        AccessionID = CharText;
                                            {
                                              label = XmLabel;
                                              Group: Widget
                                                labelString = "Antigen Accession ID";
                                            }
                                            {
                                              text = text;
                                              Group: Widget
                                                translations = "#override
Shift<Key>Tab: prev-tab-group()
<Key>Tab: VerifyMGIAcc() DisplayAntigenSource()";
                                              Group: User
                                                required = True;
                                            }
                                      }
                                      {
                                        AccessionName = CharSText : mgiDataTypes;
                                            {
                                              label = XmLabel;
                                              Group: Widget
                                                labelString = "Antigen Name";
                                            }
                                            {
                                              text = scrolledText : mgiDataTypes;
                                              Group: Widget
                                                columns = 40;
                                              Group: User
                                                required = True;
                                            }
                                      }
                                }
                                {
                                  Region = CharText : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = AntigenAccession;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = AntigenAccession;
                                    topOffset = 2;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        label = XmLabel;
                                        Group: Widget
                                          labelString = "Region\nCovered";
                                      }
                                      {
                                        text = text;
                                        Group: Widget
                                          columns = 65;
                                      }
                                }
                                {
                                  AntigenNote = Notes : mgiDataTypes;
                                  Group: Widget
                                    xrtGearOrientation = horizontal;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = Region;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = Region;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    topOffset = 2;
                                      {
                                        label = XmLabel;
                                        Group: Widget
                                          labelString = "Antigen\nNotes";
                                      }
                                      {
                                        text = scrolledText : mgiDataTypes;
                                        Group: Widget
                                          columns = 65;
                                          editMode = single_line_edit;
                                          rows = 1;
                                      }
                                }
                                {
                                  SourceForm = SourceForm : MGI;
                                  Group: Widget
                                    rubberPositioning = False;
                                    resizePolicy = resize_any;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = AntigenNote;
                                    topOffset = 2;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        SourceID = ID : mgiDataTypes;
                                      }
                                      {
                                        Library = CharText : mgiDataTypes;
                                      }
                                      {
                                        mgiCitation = mgiCitation : mgiDataTypes;
                                      }
                                      {
                                        SourceSegmentTypeMenu = SegmentTypeMenu : mgiOption;
                                      }
                                      {
                                        SourceVectorTypeMenu = VectorTypeMenu : mgiOption;
                                      }
                                      {
                                        ProbeOrganismMenu = ProbeOrganismMenu : mgiOption;
                                        Group: Widget
                                          subMenuId = ProbeOrganismPulldown;
                                            Popups:
                                            {
                                              ProbeOrganismPulldown = OptionPulldown;
                                              Group: User
                                                sql = "select s.*\nfrom MGI_Organism s, MGI_Organism_MGIType t\nwhere s._Organism_key = t._Organism_key\nand t._MGIType_key = 7\norder by s.commonName";
                                            }
                                      }
                                      {
                                        ViewAttributeHistory = push;
                                      }
                                      {
                                        Strain = Strain : mgiDataTypes;
                                        Group: Constraint
                                          leftWidget = ProbeOrganismMenu;
                                          topWidget = ProbeOrganismMenu;
                                      }
                                      {
                                        Tissue = Tissue : mgiDataTypes;
                                      }
                                      {
                                        Description = CharText : mgiDataTypes;
                                      }
                                      {
                                        CellLine = mgiVerify : mgiDataTypes;
                                      }
                                      {
                                        AgeMenu = AgeMenu : mgiOption;
                                      }
                                      {
                                        Age = CharText : mgiDataTypes;
                                      }
                                      {
                                        GenderMenu = GenderMenu : mgiOption;
                                      }
                                      {
                                        mgiNoteForm = mgiNoteForm : mgiDataTypes;
                                      }
                                      {
                                        CloneLibrarySet = Table : mgiTable;
                                            {
                                              Table = mgiTable : mgiTable;
                                              Group: Widget
                                                xrtTblColumnLabels = "Mode,Current Key,Key,Strain Type";
                                                xrtTblNumColumns = 4;
                                                xrtTblCharWidthSeries = "(all 0 1)(all 1-2 10)(all 3 50)";
                                                xrtTblEditableSeries = "(all 0-2 False)";
                                                xrtTblPixelWidthSeries = "(all 0-2 0)";
                                                userDefinedAttributes = "strainTypeCurrentKey:Int=\"1\"\nstrainTypeKey:Int=\"2\"\nstrainType:Int=\"3\"\n";
                                                xrtTblVisibleRows = 3;
                                            }
                                      }
                                }
                                {
                                  Marker = TableLabel : mgiTable;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    topWidget = separator;
                                    topOffset = 5;
                                    rightOffset = 5;
                                    leftWidget = Region;
                                    leftOffset = 5;
                                      {
                                        Table = mgiTable;
                                        Group: Widget
                                          xrtTblPixelWidthSeries = "(all 0-2 0)";
                                          xrtTblColumnLabels = "Mode,Current Key,New Key,Marker,Chr";
                                          xrtTblNumColumns = 5;
                                          xrtTblCharWidthSeries = "(all 0 1) (all 1-2 10) (all 3 25) (all 4 4)";
                                          xrtTblMaxLengthSeries = "(all 3 40) (all 4 8)";
                                          xrtTblNumRows = 11;
                                          xrtTblVisibleRows = 10;
                                          userDefinedAttributes = "markerCurrentKey:Int(Int)=\"1\"\nmarkerKey:Int(Int)=\"2\"\nmarkerSymbol:Int(Int)=\"3\"\nmarkerChr:Int(Int)=\"4\"\nmarkerColumns:Int=\"1\"\n";
                                          xrtTblValidateCellCallback = "D:VerifyMarker,\nD:CommitTableCellEdit";
                                            {
                                              label = XtXrtLabel;
                                              Group: Widget
                                                labelString = Markers;
                                            }
                                      }
                                }
                                {
                                  Reference = ReferenceTypeTable1 : mgiTable;
                                  Group: Widget
                                    rubberPositioning = False;
                                    resizePolicy = resize_any;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    bottomAttachment = attach_form;
                                    resizable = true;
                                    leftOffset = 5;
                                    topWidget = CVAntibodyNote;
                                    topOffset = 5;
                                    bottomOffset = 5;
                                      {
                                        Table = mgiTable;
                                        Group: Widget
                                          xrtTblCharWidthSeries = "(all 0 1)(all 1-6 10)(all 7 30)";
                                          xrtTblNumRows = 10;
                                          xrtTblImportDelimiter = 10;
                                        Group: User
                                          mgiTypeKey = 6;
                                            {
                                              label = XtXrtLabel;
                                              Group: Widget
                                                labelString = Reference;
                                            }
                                      }
                                      {
                                        AddRow = TablePush : mgiTable;
                                        Group: Widget
                                          labelString = "Add Row & Ref Type";
                                      }
                                      {
                                        DeleteRow = TablePush : mgiTable;
                                        Group: Constraint
                                          leftAttachment = attach_widget;
                                          leftWidget = AddRow;
                                          rightAttachment = attach_none;
                                          topAttachment = attach_opposite_widget;
                                          topWidget = AddRow;
                                          bottomAttachment = attach_none;
                                          resizable = true;
                                      }
                                      {
                                        ReferenceTypeMenu = ReferenceTypeMenu : mgiOption;
                                            Popups:
                                            {
                                              ReferenceTypePulldown = OptionPulldown : mgiOption;
                                              Group: User
                                                sql = "select _RefAssocType_key, assocType, allowOnlyOne from MGI_RefType_Antibody_View order by assocType";
                                            }
                                      }
                                }
                                {
                                  Alias = TableLabel : mgiTable;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = Reference;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftOffset = 5;
                                    leftWidget = Reference;
                                    rightOffset = 5;
                                      {
                                        Table = mgiTable;
                                        Group: Widget
                                          xrtTblNumColumns = 6;
                                          xrtTblPixelWidthSeries = "(all 0-2 0)";
                                          xrtTblColumnLabels = "Mode, Key, Ref Key,  Alias, J:, Citation";
                                          xrtTblMaxLengthSeries = "(all 3 255) (all 4 10) (all 5 255)";
                                          xrtTblCharWidthSeries = "(all 0 1) (all 3 15) (all 4 10) (all 5 30)";
                                          userDefinedAttributes = "aliasKey:Int=\"1\"\nrefsKey:Int=\"2\"\nalias:Int=\"3\"\njnum:Int=\"4\"\ncitation:Int=\"5\"\n";
                                          xrtTblValidateCellCallback = "D:VerifyReference,\nD:CommitTableCellEdit";
                                          xrtTblVisibleRows = 3;
                                            {
                                              label = XtXrtLabel;
                                              Group: Widget
                                                labelString = Alias;
                                            }
                                      }
                                }
                                {
                                  AntibodyNote = Notes : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    leftOffset = 5;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = SourceForm;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        label = XmLabel;
                                        Group: Widget
                                          labelString = "Antibody Notes";
                                      }
                                      {
                                        text = scrolledText : mgiDataTypes;
                                        Group: Widget
                                          columns = 95;
                                      }
                                }
                                {
                                  RecogNote = mgiNoteShort : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftWidget = CVAntibodyNote;
                                    topWidget = CVAntibodyNote;
                                    leftOffset = 55;
                                  Group: Control
                                    vipComment = "The XmRowColumn widget is a general purpose manager capable of containing any widget type as a child. In general, it requires no special knowledge about how its children function and provides nothing beyond support for several different layout styles. However, it can be configured as a menu, in which case, it expects only certain children, and it configures to a particular layout. The menus supported are XmMenuBar, XmPulldownMenu, XmPopupMenu, and XmOptionMenu.";
                                      {
                                        Note = Notes : mgiDataTypes;
                                            {
                                              label = XmLabel;
                                              Group: Widget
                                                labelString = "Antigen Recognition Notes";
                                            }
                                      }
                                      {
                                        NotePush = NotePushShort : mgiDataTypes;
                                        Group: Widget
                                          labelString = "Antigen Recognition Notes";
                                      }
                                }
                                {
                                  CVAntibodyNote = CVAntibodyNote : mgiCV;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    leftOffset = 5;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = AntibodyNote;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        AntibodyObtained = AppendNotePush : mgiDataTypes;
                                        Group: User
                                          noteWidget = AntibodyNote;
                                      }
                                }
                          }
                    }
                    {
                      Control = Control;
                          {
                            ControlForm = XmForm;
                            Group: Widget
                              rubberPositioning = False;
                              resizePolicy = resize_any;
                                {
                                  Search = ControlPush;
                                }
                                {
                                  Clear = ControlPush;
                                  Group: Widget
                                    activateCallback = "D:ClearAntibody";
                                }
                                {
                                  Modify = ControlPush;
                                }
                                {
                                  Add = ControlPush;
                                }
                                {
                                  Delete = ControlPush;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = Add;
                                    leftOffset = 2;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = Add;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  Previous = ControlArrow;
                                }
                                {
                                  Next = ControlArrow;
                                }
                                {
                                  Bottom = ControlArrow : mgiControl;
                                }
                                {
                                  Clear1 = XmMenuBar;
                                }
                                {
                                  RecordCount = RecordCount : mgiDataTypes;
                                }
                                {
                                  CreationDate = CreationDate : mgiDataTypes;
                                  Group: Widget
                                    managed = False;
                                }
                                {
                                  ModifiedDate = ModifiedDate : mgiDataTypes;
                                  Group: Widget
                                    managed = False;
                                }
                                {
                                  ModificationHistory = ModificationHistory : mgiTable;
                                  Group: Widget
                                    managed = True;
                                      {
                                        Table = mgiTable : mgiTable;
                                        Group: Widget
                                          xrtTblNumRows = 2;
                                      }
                                }
                          }
                    }
                    {
                      Lookup = Lookup;
                          {
                            panedWindow = XmPanedWindow;
                                {
                                  mgiAccessionTable = mgiAccessionTable : mgiTable;
                                      {
                                        Table = mgiTable;
                                      }
                                      {
                                        Add = TablePush;
                                      }
                                      {
                                        Delete = TablePush;
                                      }
                                      {
                                        AccSourceMenu = AccSourceMenu;
                                        Group: User
                                          defaultOption = ATCC;
                                            Popups:
                                            {
                                              AccSourcePulldown = OptionPulldown;
                                                  {
                                                    MGI = AccToggle;
                                                  }
                                                  {
                                                    MRK = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    J = AccToggle;
                                                  }
                                                  {
                                                    PubMed = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    DXDOI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NSequence = AccToggle;
                                                  }
                                                  {
                                                    EnsemblGeneModel = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EnsemblProtein = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EnsemblTranscript = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RefSeq = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    SWISSPROT = AccToggle;
                                                  }
                                                  {
                                                    TrEMBL = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    VEGAGeneModel = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    VEGAProtein = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    VEGATranscript = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    AllenBrainAtlas = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Affy1 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Affy430 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    AffyU74 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ArrayExpress = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CCDS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    DFCI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    DOTS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EC = AccToggle;
                                                  }
                                                  {
                                                    FuncBase = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HomoloGene = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    miRBase = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIAGeneIndex = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    PDB = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ProteinOntology = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENCluster = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENClone = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENFANTOM = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    UniGene = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    QTLArchive = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    InterPro = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IMAGE = AccToggle;
                                                  }
                                                  {
                                                    MGC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    WashU = AccToggle;
                                                  }
                                                  {
                                                    ATCC = AccToggle;
                                                    Group: Widget
                                                      managed = True;
                                                  }
                                                  {
                                                    MGIImage = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BGEM = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    GUDMAP = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CREX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HYEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    INEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    FSEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TEXT = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TXEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    PMEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    E = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HGNC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    OMIM = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RGD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIA = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIA7 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIA15K = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RPCI23 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RPCI24 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    UniSTS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BROAD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Taxon = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    JRS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MMRRC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    APB = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BCBC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CARD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CMMR = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EMMA = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EMS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Harwell = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    JPGA = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMP = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NCIMR = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MTG = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MUGEN = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIG = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NMICE = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    OBS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ORNL = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENBRC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TAC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RMRC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    WTSI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IMAGELibrary = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    dbESTLibrary = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IGTC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    LexiconGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BayGenomicGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TexasGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TIGEMGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ModellingHumanGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ESCDGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ExchangeableClonesGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    GermanGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    SangerGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HutchinsonGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPRegeneron = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPCSD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RegeneronOther = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPRegeneronProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPCSDProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NORCOMMProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EUCOMMProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Genentech = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EUCOMMCellLine = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EUCOMMSequenceType = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RuleyHECellLine = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IshidaYCellLine = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Lexicon = AccToggle : mgiOption;
                                                  }
                                            }
                                      }
                                }
                          }
                    }
                    Popups:
                    {
                      StatusDialog = StatusDialog : mgiDialog;
                    }
                    {
                      DeleteDialog = DeleteDialog : mgiDialog;
                    }
                    {
                      ReportDialog = ReportDialog : mgiDialog;
                          {
                            FileSelection = FileSelection;
                          }
                          {
                            Lookup = XmFrame;
                                {
                                  panedWindow = XmPanedWindow;
                                      {
                                        ReportList = LookupList : mgiLookup;
                                      }
                                      {
                                        PrinterList = LookupList;
                                      }
                                      {
                                        PrintOrient = Choice : mgiDataTypes;
                                            {
                                              PrintOrientBox : ChoiceBox = XmRowColumn;
                                                  {
                                                    Portrait = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      set = True;
                                                      labelString = Portrait;
                                                  }
                                                  {
                                                    Landscape = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      labelString = Landscape;
                                                  }
                                            }
                                      }
                                      {
                                        PrintColumn = Choice : mgiDataTypes;
                                            {
                                              PrintColumnBox : ChoiceBox = XmRowColumn;
                                                  {
                                                    OneColumn = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      set = True;
                                                      labelString = "1 column";
                                                  }
                                                  {
                                                    TwoColumn = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      labelString = "2 column";
                                                  }
                                            }
                                      }
                                }
                          }
                    }
                    {
                      SearchDialog = SearchDialog : mgiDialog;
                    }
                    {
                      WhichItem = WhichItem : mgiDialog;
                    }
                    {
                      VerifyItemAdd = VerifyItemAdd : mgiDialog;
                    }
                    {
                      WorkingDialog = WorkingDialog : mgiDialog;
                    }
                    {
                      NoteDialog = NoteDialog : mgiDialog;
                          {
                            label = XmLabel;
                          }
                          {
                            Note = Notes : mgiDataTypes;
                                {
                                  label = XmLabel;
                                }
                                {
                                  text = scrolledText;
                                  Group: Widget
                                    maxLength = 255;
                                }
                          }
                    }
              }
        }
        {
          InSituForm = SubEditForm : MGI;
          Group: Widget
            rubberPositioning = False;
            width = 1000;
            resizePolicy = resize_none;
          Group: Control
            vip_x = 60;
            vip_y = 250;
              {
                Specimen = OrderedTableLabel : mgiTable;
                Group: Widget
                  rubberPositioning = False;
                  resizePolicy = resize_any;
                Group: Constraint
                  leftAttachment = attach_form;
                  rightAttachment = attach_form;
                  topAttachment = attach_form;
                  bottomAttachment = attach_form;
                  resizable = true;
                    {
                      Table = mgiTable;
                      Group: Widget
                        userDefinedAttributes = "genotypeKey:Int(Int)=\"4\"\ngenotype:Int(Int)=\"13\"\nageKey:Int(Int)=\"5\"\nagePrefix:Int(Int)=\"14\"\nageRange:Int(Int)=\"15\"\nsexKey:Int(Int)=\"8\"\nsex:Int(Int)=\"17\"\nfixationKey:Int(Int)=\"9\"\nfixation:Int(Int)=\"18\"\nembeddingKey:Int(Int)=\"10\"\nembedding:Int(Int)=\"19\"\nhybridizationKey:Int(Int)=\"11\"\nhybridization:Int(Int)=\"20\"\nageMin:Int(Int)=\"6\"\nageMax:Int(Int)=\"7\"\nageNote:Int(Int)=\"16\"\nspecimenNote:Int(Int)=\"22\"\nspecimenKey:Int(Int)=\"3\"\nresults:Int(Int)=\"21\"\nspecimenLabel:Int(Int)=\"12\"\n";
                        xrtTblCharWidthSeries = "(all 0 1)(all 1-2 3)(all 12 20)(all 13 15)(all 14 15)(all 16 10)(all 17 8)(all 18 10)(all 19 11)(all 20 15)(all 21 3)(all 22 50)";
                        xrtTblColumnLabels = "Mode,Current Order,#,Specimen Key,Geno Key,Age Key,Age Min, Age Max,Sex key,Fix Key,Embed Key,Hybrid Key,Specimen Label,Genotype,Age,Age Range,Age Note,Sex,Fixation,Embedding,Hybridization,R,Notes";
                        xrtTblEditableSeries = "(all 0-2 False)(all 14-22 False) (all 15 True)(all 16 True)(all 22 True)";
                        xrtTblEnterCellCallback = "D:GenotypeClipboardSetItems,\nD:SetOptions";
                        xrtTblMaxLengthSeries = "(all 12 255)(all 16 255)(all 22 255)";
                        xrtTblNumColumns = 23;
                        xrtTblNumRows = 21;
                        xrtTblPixelWidthSeries = "(all 0-1 0)(all 3-11 0)";
                        xrtTblTraversableSeries = "(all 0-11 False)";
                        xrtTblValidateCellCallback = "D:CopySpecimen,\nD:VerifyGenotype,\nD:VerifyAge,\nD:CommitTableCellEdit";
                        xrtTblVisibleRows = 20;
                        xrtTblTraverseCellCallback = "D:DetectISResultModification";
                        xrtTblAllowCellResize = resize_horizontal;
                        xrtTblDisplayHorizScrollBar = dispsb_always;
                        xrtTblFrozenColumns = 13;
                        xrtTblMinCellVisibility = 5;
                      Group: User
                        saveEditableSeries = "(all 0-2 False)(all 14-22 False)(all 15 True)(all 16 True)(all 22 True)";
                        saveTraversableSeries = "(all 0-11 False)";
                          {
                            label = XtXrtLabel;
                            Group: Widget
                              labelString = Specimen;
                          }
                    }
                    {
                      AddRow = TablePush;
                    }
                    {
                      DeleteRow = TablePush;
                    }
                    {
                      InsertRow = TablePush : mgiTable;
                    }
                    {
                      EditOrder = toggle : mgiDataTypes;
                      Group: Constraint
                        leftAttachment = attach_widget;
                        leftWidget = CopyColumn;
                        rightAttachment = attach_none;
                        topAttachment = attach_opposite_widget;
                        topWidget = CopyColumn;
                        bottomAttachment = attach_none;
                        resizable = true;
                    }
                    {
                      CopyColumn = TablePush : mgiTable;
                      Group: Widget
                        activateCallback = "D:CopySpecimenColumn,\nD:GoHome";
                        labelString = "Copy Column";
                      Group: Constraint
                        leftAttachment = attach_widget;
                        leftWidget = InsertRow;
                        rightAttachment = attach_none;
                        topAttachment = attach_opposite_widget;
                        topWidget = InsertRow;
                        bottomAttachment = attach_none;
                        resizable = true;
                    }
              }
        }
        {
          GelForm = SubEditForm : MGI;
          Group: Widget
            managed = False;
            rubberPositioning = False;
            resizePolicy = resize_none;
            width = 1000;
          Group: Control
            vip_x = 175;
            vip_y = 140;
              {
                ImagePaneList = LookupList : mgiLookup;
                Group: Constraint
                  leftAttachment = attach_form;
                  leftOffset = 5;
                  rightAttachment = attach_none;
                  topAttachment = attach_form;
                  bottomAttachment = attach_none;
                  resizable = true;
                  topOffset = 5;
                Group: User
                  cmd = "select _ImagePane_key, paneLabel from IMG_ImagePaneGXD_View where _Refs_key =";
                    {
                      Label = LookupLabel;
                      Group: Widget
                        labelString = "0 Image Panes";
                        activateCallback = "D:InitImagePane";
                      Group: User
                        defaultLabel = "Image Panes";
                    }
                    {
                      List = list;
                      Group: Widget
                        visibleItemCount = 18;
                        scrollBarDisplayPolicy = static;
                        listSizePolicy = variable;
                        width = 20;
                    }
              }
              {
                GelLane = OrderedTableLabel : mgiTable;
                Group: Widget
                  rubberPositioning = False;
                  resizePolicy = resize_any;
                Group: Constraint
                  leftAttachment = attach_widget;
                  rightAttachment = attach_form;
                  topAttachment = attach_form;
                  bottomAttachment = attach_none;
                  resizable = true;
                  leftOffset = 5;
                  leftWidget = ImagePaneList;
                  rightOffset = 5;
                    {
                      Table = mgiTable;
                      Group: Widget
                        xrtTblColumnLabels = "Mode,Current Order,Gel Lane Key,Control Key,Genotype key,Structure Key,RNA Key,Age Key,Age Min,Age Max,Sex Key,Lane,Label,Control,Genotype,Struct,Sample Amt,RNA,Age,Age Range,Age Note,Sex,Notes";
                        xrtTblEnterCellCallback = "D:ADClipboardSetItems,\nD:GenotypeClipboardSetItems,\nD:SetOptions";
                        xrtTblNumColumns = 23;
                        xrtTblEditableSeries = "(all all False) (all 12 True) (all 14 True) (all 16 True) (all 19 True)(all 20 True)(all 22 True)";
                        xrtTblNumRows = 16;
                        xrtTblPixelWidthSeries = "(all 0-10 0)";
                        xrtTblValidateCellCallback = "D:CopyGelLane,\nD:VerifyFloat,\nD:VerifyGenotype,\nD:VerifyAge,\nD:VerifyGelLaneRNAType,\nD:CommitTableCellEdit";
                        xrtTblVisibleRows = 15;
                        userDefinedAttributes = "laneKey:Int(Int)=\"2\"\ncontrolKey:Int(Int)=\"3\"\ngenotypeKey:Int(Int)=\"4\"\nstructureKeys:Int(Int)=\"5\"\nrnaKey:Int(Int)=\"6\"\nageKey:Int(Int)=\"7\"\nageMin:Int(Int)=\"8\"\nageMax:Int(Int)=\"9\"\nsexKey:Int(Int)=\"10\"\nlabel:Int(Int)=\"12\"\ncontrol:Int(Int)=\"13\"\ngenotype:Int(Int)=\"14\"\nstructures:Int(Int)=\"15\"\nsampleAmt:Int(Int)=\"16\"\nrna:Int(Int)=\"17\"\nagePrefix:Int(Int)=\"18\"\nageRange:Int(Int)=\"19\"\nageNote:Int(Int)=\"20\"\nsex:Int(Int)=\"21\"\nlaneNote:Int(Int)=\"22\"\nverifyFloat:StringTable(StringTable)=\"16\"\nclipboard:String=\"CVGel\"\n";
                        xrtTblTraversableSeries = "(all 0-11 False)";
                        xrtTblCharWidthSeries = "(all 0 1)(all 11 4)(all 12 5)(all 13 7)(all 14 15)(all 15 6)(all 16 10)(all 17 8)(all 18 15)(all 19 9)(all 20 10)(all 21 6)(all 22 50)";
                        xrtTblAllowCellResize = resize_horizontal;
                        xrtTblDisplayHorizScrollBar = dispsb_always;
                        xrtTblMaxLengthSeries = "(all 20 255)(all 22 255)";
                        xrtTblMinCellVisibility = 5;
                        xrtTblFrozenColumns = 15;
                      Group: User
                        seqNum = 11;
                        saveEditableSeries = "(all all False) (all 12 True) (all 14 True) (all 16 True) (all 19 True)(all 20 True)(all 22 True)";
                        saveTraversableSeries = "(all 0-11 False)";
                          {
                            label = XtXrtLabel;
                            Group: Widget
                              labelString = "Gel Lanes";
                          }
                    }
                    {
                      AddRow = TablePush;
                    }
                    {
                      DeleteRow = TablePush;
                    }
                    {
                      InsertRow = TablePush : mgiTable;
                    }
                    {
                      EditOrder = toggle : mgiDataTypes;
                      Group: Constraint
                        leftAttachment = attach_widget;
                        leftWidget = CopyColumn;
                        rightAttachment = attach_none;
                        topAttachment = attach_opposite_widget;
                        topWidget = CopyColumn;
                        bottomAttachment = attach_none;
                        resizable = true;
                    }
                    {
                      CopyColumn = TablePush : mgiTable;
                      Group: Widget
                        activateCallback = "D:CopyGelLaneColumn,\nD:GoHome";
                        labelString = "Copy Column";
                      Group: Constraint
                        leftAttachment = attach_widget;
                        leftWidget = InsertRow;
                        rightAttachment = attach_none;
                        topAttachment = attach_opposite_widget;
                        topWidget = InsertRow;
                        bottomAttachment = attach_none;
                        resizable = true;
                    }
              }
              {
                GelRow = TableLabel : mgiTable;
                Group: Widget
                  rubberPositioning = False;
                  resizePolicy = resize_any;
                Group: Constraint
                  leftAttachment = attach_form;
                  rightAttachment = attach_form;
                  topAttachment = attach_widget;
                  topWidget = GelLane;
                  bottomAttachment = attach_form;
                  resizable = true;
                  bottomOffset = 5;
                  leftOffset = 5;
                    {
                      Table = mgiTable;
                      Group: Widget
                        xrtTblNumColumns = 7;
                        xrtTblEditableSeries = "(all 0-3 False)";
                        xrtTblPixelWidthSeries = "(all 0-2 0)";
                        xrtTblTraversableSeries = "(all 0-3 False)";
                        xrtTblColumnLabels = "Mode,Row Key,Unit Key,Row,Size,Units,Notes";
                        userDefinedAttributes = "rowKey:Int(Int)=\"1\"\nunitsKey:Int(Int)=\"2\"\nseqNum:Int(Int)=\"3\"\nsize:Int(Int)=\"4\"\nunits:Int(Int)=\"5\"\nrowNotes:Int(Int)=\"6\"\nbandIncrement:Int(Int)=\"6\"\nlaneKey:Int(Int)=\"8\"\nbandKey:Int(Int)=\"9\"\nstrengthKey:Int(Int)=\"10\"\nstrength:Int(Int)=\"11\"\nbandNotes:Int(Int)=\"12\"\nverifyFloat:StringTable(StringTable)=\"4\"\nbandMode:Int(Int)=\"7\"\n";
                        xrtTblCharWidthSeries = "(all 0 1)(all 3 3)(all 4-6 5)";
                        xrtTblDisplayHorizScrollBar = dispsb_always;
                        xrtTblFrozenColumns = 6;
                        xrtTblEnterCellCallback = "D:SetOptions";
                        xrtTblValidateCellCallback = "D:CopyGelRow,\nD:VerifyFloat,\nD:VerifyGelRowUnits,\nD:CommitTableCellEdit";
                        xrtTblVisibleRows = 3;
                        xrtTblNumRows = 11;
                      Group: Control
                        lockedResources = xrtTblColumnLabels;
                      Group: User
                        addSeqNum = True;
                          {
                            label = XtXrtLabel;
                            Group: Widget
                              labelString = "Gel Rows and Bands";
                          }
                    }
                    {
                      AddRow = TablePush;
                    }
                    {
                      DeleteRow = TablePush;
                    }
                    {
                      DeleteBand = TablePush : mgiTable;
                      Group: Widget
                        labelString = "Delete Band";
                        activateCallback = "D:DeleteGelBand";
                      Group: Constraint
                        leftAttachment = attach_widget;
                        leftWidget = DeleteRow;
                        rightAttachment = attach_none;
                        topAttachment = attach_opposite_widget;
                        topWidget = DeleteRow;
                        bottomAttachment = attach_none;
                        resizable = true;
                    }
              }
        }
        {
          IndexStageModule = Module : MGI;
          Group: Widget
            title = "GXD Index";
          Group: Control
            vip_x = 60;
            vip_y = 140;
          Group: User
            homeWidget = Marker;
            activateButtonName = IndexStage;
              {
                MainForm = XmForm;
                    {
                      MainMenu = MainMenu;
                          {
                            File = File : mgiMenu;
                          }
                          {
                            Commands = Commands : mgiMenu;
                                Popups:
                                {
                                  CommandsPulldown = MenuPulldown : mgiMenu;
                                      {
                                        Search = MenuPush : mgiMenu;
                                      }
                                      {
                                        Modify = MenuPush : mgiMenu;
                                      }
                                      {
                                        Add = MenuPush : mgiMenu;
                                      }
                                      {
                                        Delete = MenuPush : mgiMenu;
                                      }
                                      {
                                        Duplicate = ControlPush : mgiControl;
                                        Group: Widget
                                          activateCallback = "D:VerifyEdit(mode = 4),\nD:Duplicate,\nD:GoHome";
                                          labelString = "Add Copy";
                                          accelerator = "Ctrl<Key>y";
                                          background = Thistle;
                                          mnemonic = y;
                                      }
                                      {
                                        separator1 = XmSeparator;
                                      }
                                      {
                                        Clear = MenuPush : mgiMenu;
                                        Group: Widget
                                          activateCallback = "D:ClearIndex";
                                      }
                                }
                          }
                    }
                    {
                      Edit = XmFrame;
                          {
                            EditForm = EditForm : MGI;
                            Group: Widget
                              rubberPositioning = False;
                              resizePolicy = resize_any;
                                {
                                  ID = ID;
                                }
                                {
                                  mgiMarker = mgiMarker : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    leftOffset = 5;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_form;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        ObjectID = ID;
                                      }
                                      {
                                        Marker = CharText;
                                            {
                                              label = XmLabel;
                                            }
                                            {
                                              text = text;
                                              Group: Widget
                                                translations = "#override
Shift<Key>Tab: prev-tab-group()
<Key>Tab: VerifyMarker()";
                                            }
                                      }
                                }
                                {
                                  mgiCitation = mgiCitation : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = mgiMarker;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftWidget = mgiMarker;
                                }
                                {
                                  GXDIndexPriorityMenu = GXDIndexPriorityMenu : mgiOption;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftOffset = 30;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftWidget = mgiMarker;
                                    topWidget = mgiMarker;
                                    topOffset = 10;
                                }
                                {
                                  GXDIndexConditionalMutantsMenu = GXDIndexConditionalMutantsMenu : mgiOption;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = GXDIndexPriorityMenu;
                                    leftOffset = 20;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = GXDIndexPriorityMenu;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  CodedMenu = YesNoMenu : mgiOption;
                                  Group: Widget
                                    labelString = "Coded?";
                                    subMenuId = CodedPulldown;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = GXDIndexConditionalMutantsMenu;
                                    leftOffset = 20;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = GXDIndexConditionalMutantsMenu;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      Popups:
                                      {
                                        CodedPulldown : YesNoPulldown = OptionPulldown;
                                      }
                                }
                                {
                                  Note = SingleNote : mgiDataTypes;
                                  Group: Widget
                                    xrtGearOrientation = horizontal;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = mgiCitation;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = mgiCitation;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        label = XmLabel;
                                      }
                                      {
                                        text = scrolledText : mgiDataTypes;
                                        Group: Widget
                                          rows = 2;
                                          columns = 100;
                                          maxLength = 255;
                                      }
                                }
                                {
                                  Stage = TableLabel : mgiTable;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = CVStagingNote;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = CVStagingNote;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    rightOffset = 5;
                                      {
                                        Table = mgiTable;
                                        Group: Widget
                                          xrtTblNumColumns = 43;
                                          xrtTblCharWidthSeries = "(all label 10) (all 0 1)(all 1-42 4)";
                                          xrtTblDisplayHorizScrollBar = dispsb_always;
                                          xrtTblVisibleColumns = 25;
                                          xrtTblEditableSeries = "(all all False)";
                                          xrtTblSelectionPolicy = select_single;
                                          xrtTblSelectCallback = "D:SetCellToX";
                                          xrtTblSelectedBackground = None;
                                          xrtTblSelectedForeground = None;
                                          userDefinedAttributes = "beginX:Int(Int)=\"1\"\nendX:Int(Int)=\"0\"\n";
                                          xrtTblHorizScrollBarPlacement = place_top;
                                        Group: User
                                          traverseOnClear = False;
                                            {
                                              label = XtXrtLabel;
                                              Group: Widget
                                                labelString = DPC;
                                            }
                                      }
                                      {
                                        AddRow = TablePush;
                                        Group: Widget
                                          managed = False;
                                      }
                                      {
                                        DeleteRow = TablePush;
                                        Group: Widget
                                          managed = False;
                                      }
                                }
                                {
                                  CVStagingNote = CVStagingNote : mgiCV;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = Note;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = Note;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        AgeNotSpecified = AppendNotePush : mgiDataTypes;
                                        Group: User
                                          noteWidget = Note;
                                      }
                                      {
                                        AgeNormalized = AppendNotePush : mgiDataTypes;
                                        Group: User
                                          noteWidget = Note;
                                      }
                                      {
                                        AgeAssigned = AppendNotePush : mgiDataTypes;
                                        Group: User
                                          noteWidget = Note;
                                      }
                                }
                                {
                                  IndexNoteMenu = NoteMenu : mgiOption;
                                  Group: Widget
                                    labelString = "Pick List of Index Notes";
                                    subMenuId = IndexNotePulldown;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = CVStagingNote;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = CVStagingNote;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftOffset = 5;
                                    topOffset = 5;
                                      Popups:
                                      {
                                        IndexNotePulldown : NotePulldown = OptionPulldown : mgiOption;
                                            {
                                              Activated = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = Activated;
                                              Group: User
                                                noteWidget = Note;
                                                note = "The antibody used recognizes the activated form of the protein.";
                                            }
                                            {
                                              Cleaved = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = Cleaved;
                                              Group: User
                                                noteWidget = Note;
                                                note = "The antibody used recognizes the cleaved form of the protein.";
                                            }
                                            {
                                              Phosphorylated = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = Phosphorylated;
                                              Group: User
                                                noteWidget = Note;
                                                note = "The antibody used recognizes the phosphorylated form of the protein.";
                                            }
                                            {
                                              AbProbeSpec = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = "Ab/probe spec.";
                                              Group: User
                                                noteWidget = Note;
                                                note = "The specificity of the antibody/probe used was not detailed; both/all family members have been annotated.";
                                            }
                                            {
                                              AbProdeSpecMGI = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = "Ab/probe spec. MGI ID";
                                              Group: User
                                                noteWidget = Note;
                                                note = "The antibody/probe specificity was not detailed and may recognize a related gene; (MGI:) has also been annotated.";
                                            }
                                            {
                                              gRTPCR = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = "qRT-PCR";
                                              Group: User
                                                noteWidget = Note;
                                                note = "The RT-PCR data was obtained using quantitative RT-PCR.";
                                            }
                                            {
                                              microRNA = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = microRNA;
                                              Group: User
                                                noteWidget = Note;
                                                note = "The mature microRNA is encoded at multiple sites in the genome.";
                                            }
                                            {
                                              Supplmentary = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = Supplementary;
                                              Group: User
                                                noteWidget = Note;
                                                note = "Results are in the supplementary material.";
                                            }
                                            {
                                              SectionWM = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = "Section or WM";
                                              Group: User
                                                noteWidget = Note;
                                                note = "Reference does not indicate whether specimen is a section or whole mount.";
                                            }
                                            {
                                              Range = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = Range;
                                              Group: User
                                                noteWidget = Note;
                                                note = "Authors state that expression was examined on dpc *-*; not all stages are detailed.";
                                            }
                                            {
                                              PrimerSpec = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = "Primer spec";
                                              Group: User
                                                noteWidget = Note;
                                                note = "Primer specificity was not detailed and may amplify a related gene; several/all family members have been annotated.";
                                            }
                                            {
                                              PrimerSpecMGI = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = "Primer spec MGI ID";
                                              Group: User
                                                noteWidget = Note;
                                                note = "Primer specificity was not detailed and may amplify a related gene; (MGI:) has also been annotated.";
                                            }
                                            {
                                              Immuno = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = Immunoprecipitated;
                                              Group: User
                                                noteWidget = Note;
                                                note = "The protein was immunoprecipitated prior to Western blotting.";
                                            }
                                            {
                                              DotBlot = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = "Dot Blot";
                                              Group: User
                                                noteWidget = Note;
                                                note = "Northern data was obtained from a dot blot.";
                                            }
                                            {
                                              EnzymaticAct = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = "Enzymatic act";
                                              Group: User
                                                noteWidget = Note;
                                                note = "Enzymatic activity was used to detect gene expression.";
                                            }
                                            {
                                              Discrepancies = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = Discrepancies;
                                              Group: User
                                                noteWidget = Note;
                                                note = "There are discrepancies between the text and the figure legend as to the age of the tissue/embryo.";
                                            }
                                            {
                                              Fractionated = AppendNotePush : mgiDataTypes;
                                              Group: Widget
                                                labelString = Fractionated;
                                              Group: User
                                                noteWidget = Note;
                                                note = "The material used in the Western blot was fractionated.";
                                            }
                                      }
                                }
                                Popups:
                                {
                                  MolSegNotePulldown : NotePulldown = OptionPulldown : mgiOption;
                                      {
                                        KFMemorial = AppendNotePush : mgiDataTypes;
                                        Group: User
                                          noteWidget = MolNote;
                                          note = "This clone is derived from a gene that produces alternate transcripts.";
                                      }
                                      {
                                        Chimeric = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = Chimeric;
                                        Group: User
                                          note = "Chimeric:  MGI curatorial staff have found evidence of artifact in the sequence of this molecular segment. This sequence appears to be artifactually chimeric.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        Same5 = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "5'-overlap same strand";
                                        Group: User
                                          note = "5'-overlap same strand:  MGI curatorial staff have found evidence of artifact in the sequence of this molecular segment. This sequence is derived from a transcript for a gene that initiates at a site within a linked upstream gene, where the upstream gene is transcribed in the same direction.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        Same3 = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "3'-overlap same strand";
                                        Group: User
                                          note = "3'-overlap same strand:  MGI curatorial staff have found evidence of artifact in the sequence of this molecular segment. This sequence is derived from a transcript for a gene that extends (reads-through) into a linked downstream gene, where the downstream gene is transcribed in the same direction.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        Opposite5 = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "5'-overlap opposite strand";
                                        Group: User
                                          note = "5'-overlap opposite strand:  MGI curatorial staff have found evidence of artifact in the sequence of this molecular segment. This sequence is derived from a transcript for a gene that initiates at a site within a linked upstream gene, where the upstream gene is transcribed in the opposite direction.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        Opposite3 = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "3'-overlap opposite strand";
                                        Group: User
                                          note = "3'-overlap opposite strand:  MGI curatorial staff have found evidence of artifact in the sequence of this molecular segment. This sequence is derived from a transcript for a gene that extends (reads-through) into a linked downstream gene, where the downstream gene is transcribed in the opposite direction.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        Intron = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "Intron-Containing";
                                        Group: User
                                          note = "Intron-Containing:  MGI curatorial staff have found evidence of artifact in the sequence of this molecular segment. This cDNA sequence appears to contain intronic sequence as a consequence of incomplete transcript processing.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        FrameShift = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "Frame-Shift";
                                        Group: User
                                          note = "Frame-Shift:  MGI curatorial staff have found evidence of artifact in the sequence of this molecular segment. Conceptual translation of this sequence reveals frame shift errors in the presumed coding region, which may be due to unreliable sequence data.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        Undetermined = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "Undetermined Problem Sequence";
                                        Group: User
                                          note = "Undetermined:  MGI curatorial staff have found evidence of artifact in the sequence of this molecular segment. The artifact may have been introduced during the cloning process, or may be due to unreliable sequence data.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        SequenceSource = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "Sequence Source Difference";
                                        Group: User
                                          note = "The source of the material used to create this cDNA probe was different than that used to create the Genbank sequence record.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        DownstreamArich = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "Downstream A-rich region primed";
                                        Group: User
                                          note = "Downstream A-rich primed:  MGI curatorial staff have found evidence of \nartifact in the sequence of this molecular segment. This cDNA clone appears to \nbe the product of reverse transcription primed internally at downstream A-rich \nsequences.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        ReversedClone = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "Reversed clone";
                                        Group: User
                                          note = "Reversed clone: MGI curatorial staff have found evidence of artifact in the \nsequence of this molecular segment. The sequence of this cDNA clone appears to be\nreversed.";
                                          noteWidget = MolNote;
                                      }
                                      {
                                        Contaiminated = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          labelString = "Contaminated clone";
                                        Group: User
                                          note = "Contaminated clone: MGI curatorial staff have found evidence of artifact in the \nsequence of this molecular segment. The sequence of this cDNA clone appears to \nbe from species other than mouse.";
                                          noteWidget = MolNote;
                                      }
                                }
                          }
                    }
                    {
                      Control = Control : mgiControl;
                          {
                            ControlForm = XmForm;
                            Group: Widget
                              rubberPositioning = False;
                              resizePolicy = resize_any;
                                {
                                  Search = ControlPush;
                                }
                                {
                                  Clear = ControlPush;
                                  Group: Widget
                                    activateCallback = "D:ClearIndex";
                                }
                                {
                                  Modify = ControlPush;
                                }
                                {
                                  Add = ControlPush;
                                }
                                {
                                  Delete = ControlPush;
                                }
                                {
                                  Duplicate = ControlPush : mgiControl;
                                  Group: Widget
                                    activateCallback = "D:VerifyEdit(mode = 4),\nD:Duplicate,\nD:GoHome";
                                    labelString = "Add Copy";
                                    accelerator = "Ctrl<Key>y";
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = Search;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = Search;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  Previous = ControlArrow;
                                }
                                {
                                  Next = ControlArrow;
                                }
                                {
                                  Bottom = ControlArrow : mgiControl;
                                }
                                {
                                  Clear1 = XmMenuBar;
                                }
                                {
                                  RecordCount = RecordCount : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = Search;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = Duplicate;
                                    topOffset = 2;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  CreationDate = CreationDate : mgiDataTypes;
                                  Group: Widget
                                    managed = False;
                                }
                                {
                                  ModifiedDate = ModifiedDate : mgiDataTypes;
                                  Group: Widget
                                    managed = False;
                                }
                                {
                                  ModificationHistory = ModificationHistory : mgiTable;
                                  Group: Widget
                                    managed = True;
                                }
                          }
                    }
                    Popups:
                    {
                      StatusDialog = StatusDialog : mgiDialog;
                    }
                    {
                      DeleteDialog = DeleteDialog : mgiDialog;
                    }
                    {
                      ReportDialog = ReportDialog : mgiDialog;
                          {
                            FileSelection = FileSelection;
                          }
                          {
                            Lookup = XmFrame;
                                {
                                  panedWindow = XmPanedWindow;
                                      {
                                        ReportList = LookupList : mgiLookup;
                                      }
                                      {
                                        PrinterList = LookupList;
                                      }
                                      {
                                        PrintOrient = Choice : mgiDataTypes;
                                            {
                                              PrintOrientBox : ChoiceBox = XmRowColumn;
                                                  {
                                                    Portrait = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      set = True;
                                                      labelString = Portrait;
                                                  }
                                                  {
                                                    Landscape = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      labelString = Landscape;
                                                  }
                                            }
                                      }
                                      {
                                        PrintColumn = Choice : mgiDataTypes;
                                            {
                                              PrintColumnBox : ChoiceBox = XmRowColumn;
                                                  {
                                                    OneColumn = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      set = True;
                                                      labelString = "1 column";
                                                  }
                                                  {
                                                    TwoColumn = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      labelString = "2 column";
                                                  }
                                            }
                                      }
                                }
                          }
                    }
              }
        }
        {
          GXD = Application : MGI;
          Group: Control
            vip_x = 60;
            vip_y = 30;
          Group: User
            initDialog = "StrainDialog\nTissueDialog";
              {
                GXDForm = XmForm;
                    {
                      GXDMenu = MenuBar : mgiMenu;
                      Group: Constraint
                        leftAttachment = attach_form;
                        rightAttachment = attach_form;
                        topAttachment = attach_form;
                        bottomAttachment = attach_none;
                        resizable = true;
                          {
                            File = File : mgiMenu;
                                Popups:
                                {
                                  FilePulldown = MenuPulldown;
                                      {
                                        Exit = MenuPush;
                                        Group: Widget
                                          activateCallback = "D:ExitApplication";
                                      }
                                }
                          }
                    }
                    {
                      GXDFrame = XmFrame;
                      Group: Constraint
                        leftAttachment = attach_opposite_widget;
                        leftWidget = GXDMenu;
                        rightAttachment = attach_form;
                        topAttachment = attach_widget;
                        topWidget = GXDMenu;
                        bottomAttachment = attach_form;
                        resizable = true;
                          {
                            mgiModules = XmRowColumn;
                            Group: Widget
                              entryAlignment = alignment_center;
                              spacing = 5;
                                {
                                  Antigen = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"Antigen\")";
                                    traversalOn = False;
                                    labelString = Antigens;
                                }
                                {
                                  Antibody = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"Antibody\")";
                                    traversalOn = False;
                                    labelString = Antibodies;
                                }
                                {
                                  MolecularSegment = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"MolecularSegment\")";
                                    labelString = Probes;
                                    traversalOn = False;
                                }
                                {
                                  Image = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"Image\")";
                                    traversalOn = False;
                                    labelString = Images;
                                }
                                {
                                  Assay = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"Assay\")";
                                    traversalOn = False;
                                    labelString = Assays;
                                }
                                {
                                  Dictionary = XmPushButton;
                                  Group: Widget
                                    labelString = "Anat. Dictionary";
                                    activateCallback = "D:CreateMGIModule(name = \"Dictionary\")";
                                    traversalOn = False;
                                }
                                {
                                  IndexStage = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"IndexStage\")";
                                    traversalOn = False;
                                    labelString = Index;
                                }
                                {
                                  Reference = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"Reference\")";
                                    labelString = References;
                                    traversalOn = False;
                                }
                                {
                                  MolecularSource = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"MolecularSource\")";
                                    labelString = "Clone Libraries";
                                    traversalOn = False;
                                }
                                {
                                  ControlledVocab = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"ControlledVocab\")";
                                    labelString = "Controlled Vocab";
                                    traversalOn = False;
                                }
                                {
                                  SimpleVocab = XmPushButton;
                                  Group: Widget
                                    activateCallback = "D:CreateMGIModule(name = \"SimpleVocab\")";
                                    labelString = "Simple Vocabulary";
                                    traversalOn = False;
                                }
                          }
                    }
              }
              Popups:
              {
                StatusDialog = StatusDialog;
              }
              {
                WorkingDialog = WorkingDialog;
              }
              {
                StrainDialog = StrainDialog : mgiDialog;
              }
              {
                TissueDialog = TissueDialog : mgiDialog;
              }
        }
        {
          AssayModule = Module : MGI;
          Group: Widget
            height = 900;
            width = 1300;
          Group: Control
            vip_x = 60;
            vip_y = 85;
          Group: User
            homeWidget = Jnum;
            clearForms = "ControlForm\nEditForm\nKnockInForm\nProbePrepForm\nAntibodyPrepForm\nInSituForm\nGelForm";
            editForms = "ControlForm\nEditForm\nKnockInForm\nProbePrepForm\nAntibodyPrepForm\nInSituForm\nGelForm";
            activateButtonName = Assay;
              {
                MainForm = XmForm;
                Group: Widget
                  height = 775;
                  rubberPositioning = False;
                  resizePolicy = resize_any;
                    {
                      MainMenu = MainMenu;
                          {
                            File = File;
                          }
                          {
                            Commands = Commands : mgiMenu;
                                Popups:
                                {
                                  CommandsPulldown = MenuPulldown : mgiMenu;
                                      {
                                        Search = MenuPush : mgiMenu;
                                      }
                                      {
                                        Modify = MenuPush : mgiMenu;
                                      }
                                      {
                                        Add = MenuPush : mgiMenu;
                                      }
                                      {
                                        Delete = MenuPush : mgiMenu;
                                      }
                                      {
                                        CopySpecimenColumn = MenuPush : mgiMenu;
                                        Group: Widget
                                          accelerator = "Ctrl<Key>l";
                                          mnemonic = l;
                                          labelString = "Copy Specimen Column";
                                          activateCallback = "D:CopySpecimenColumn,\nD:GoHome";
                                      }
                                      {
                                        CopyGelColumn = MenuPush : mgiMenu;
                                        Group: Widget
                                          accelerator = "Ctrl<Key>u";
                                          mnemonic = u;
                                          labelString = "Copy Gel Column";
                                          activateCallback = "D:CopyGelLaneColumn,\nD:GoHome";
                                      }
                                      {
                                        separator1 = XmSeparator;
                                      }
                                      {
                                        Clear = MenuPush : mgiMenu;
                                        Group: Widget
                                          activateCallback = "D:ClearAssay";
                                      }
                                }
                          }
                          {
                            Edit = Edit;
                            Group: Widget
                              managed = True;
                                Popups:
                                {
                                  EditPulldown = MenuPulldown : mgiMenu;
                                      {
                                        Genotype = MenuPush : mgiMenu;
                                        Group: Widget
                                          activateCallback = "D:CreateMGIModule(name = \"Genotype\")";
                                          labelString = Genotypes;
                                      }
                                }
                          }
                    }
                    {
                      Edit = XmFrame;
                      Group: Constraint
                        leftAttachment = attach_opposite_widget;
                        leftWidget = MainMenu;
                        rightAttachment = attach_none;
                        topAttachment = attach_widget;
                        topWidget = MainMenu;
                        bottomAttachment = attach_form;
                        resizable = true;
                          {
                            EditForm = EditForm : MGI;
                            Group: Widget
                              width = 1000;
                              rubberPositioning = False;
                              resizePolicy = resize_any;
                                {
                                  ID = ID;
                                }
                                {
                                  mgiCitation = mgiCitation : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    leftOffset = 5;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_form;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                      {
                                        ObjectID = ID;
                                      }
                                      {
                                        Jnum = Jnum;
                                            {
                                              label = XmLabel;
                                            }
                                            {
                                              text = text;
                                              Group: Widget
                                                translations = "#override
 Shift<Key>Tab: prev-tab-group()
<Key>Tab: VerifyReference() InitImagePane()";
                                            }
                                      }
                                      {
                                        Citation = Citation : mgiDataTypes;
                                            {
                                              label = XmLabel;
                                            }
                                            {
                                              text = text;
                                              Group: Widget
                                                columns = 50;
                                            }
                                      }
                                }
                                {
                                  AssayTypeMenu = AssayTypeMenu : mgiOption;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = mgiCitation;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = mgiCitation;
                                    topOffset = 5;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  mgiMarker = mgiMarker : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = AssayTypeMenu;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = AssayTypeMenu;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftOffset = 5;
                                    topOffset = "-5";
                                      {
                                        ObjectID = ID;
                                      }
                                      {
                                        Marker = CharText;
                                            {
                                              label = XmLabel;
                                            }
                                            {
                                              text = text;
                                              Group: Widget
                                                userDefinedAttributes = "verifyAccessionID:Widget\n";
                                                translations = "#override
Shift<Key>Tab: prev-tab-group()
<Key>Tab: VerifyMarker() VerifyMarkerInTable()";
                                                columns = 30;
                                              Group: User
                                                verifyAccessionID = ProbeAccession;
                                            }
                                      }
                                }
                                {
                                  AssayNote = mgiNote : mgiDataTypes;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftWidget = mgiCitation;
                                    leftOffset = 25;
                                    topWidget = mgiCitation;
                                    topOffset = 5;
                                      {
                                        Note = Notes;
                                      }
                                      {
                                        NotePush = NotePush;
                                        Group: Widget
                                          labelString = "Assay Notes";
                                      }
                                }
                                {
                                  CVStagingNote = CVStagingNote : mgiCV;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftWidget = AssayNote;
                                    leftOffset = 5;
                                    topWidget = AssayNote;
                                      {
                                        AgeNotSpecified = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          activateCallback = "D:AppendToAgeNote";
                                      }
                                      {
                                        AgeNormalized = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          activateCallback = "D:AppendToAgeNote";
                                      }
                                      {
                                        AgeAssigned = AppendNotePush : mgiDataTypes;
                                        Group: Widget
                                          activateCallback = "D:AppendToAgeNote";
                                      }
                                }
                                {
                                  KnockInForm = KnockInForm : GXD;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = mgiMarker;
                                    leftOffset = 5;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = mgiMarker;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    topOffset = 5;
                                }
                                {
                                  separator = XmSeparator;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = mgiMarker;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    topOffset = 5;
                                }
                                {
                                  ProbePrepForm = ProbePrepForm : GXD;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = separator;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  AntibodyPrepForm = AntibodyPrepForm : GXD;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = separator;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  separator1 = XmSeparator;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = ProbePrepForm;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  InSituForm = InSituForm : GXD;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    bottomAttachment = attach_form;
                                    resizable = true;
                                    topWidget = separator1;
                                      {
                                        Specimen = OrderedTableLabel : mgiTable;
                                            {
                                              Table = mgiTable;
                                            }
                                            {
                                              AddRow = TablePush;
                                            }
                                            {
                                              DeleteRow = TablePush;
                                            }
                                            {
                                              InsertRow = TablePush : mgiTable;
                                            }
                                            {
                                              EditOrder = toggle : mgiDataTypes;
                                              Group: Constraint
                                                leftWidget = CopyColumn;
                                                topWidget = CopyColumn;
                                            }
                                      }
                                }
                                {
                                  GelForm = GelForm : GXD;
                                  Group: Constraint
                                    leftAttachment = attach_form;
                                    rightAttachment = attach_form;
                                    topAttachment = attach_widget;
                                    topWidget = separator1;
                                    bottomAttachment = attach_form;
                                    resizable = true;
                                      {
                                        ImagePaneList = LookupList : mgiLookup;
                                      }
                                      {
                                        GelLane = OrderedTableLabel : mgiTable;
                                            {
                                              Table = mgiTable;
                                              Group: Widget
                                                userDefinedAttributes = "laneKey:Int(Int)=\"2\"\ncontrolKey:Int(Int)=\"3\"\ngenotypeKey:Int(Int)=\"4\"\nstructureKeys:Int(Int)=\"5\"\nrnaKey:Int(Int)=\"6\"\nageKey:Int(Int)=\"7\"\nageMin:Int(Int)=\"8\"\nageMax:Int(Int)=\"9\"\nsexKey:Int(Int)=\"10\"\nlabel:Int(Int)=\"12\"\ncontrol:Int(Int)=\"13\"\ngenotype:Int(Int)=\"14\"\nstructures:Int(Int)=\"15\"\nsampleAmt:Int(Int)=\"16\"\nrna:Int(Int)=\"17\"\nagePrefix:Int(Int)=\"18\"\nageRange:Int(Int)=\"19\"\nageNote:Int(Int)=\"20\"\nsex:Int(Int)=\"21\"\nlaneNote:Int(Int)=\"22\"\nverifyFloat:StringTable(StringTable)=\"16\"\n";
                                              Group: Control
                                                collapsed = False;
                                                  {
                                                    label = XtXrtLabel;
                                                    Group: Widget
                                                      labelString = "Gel Lanes";
                                                  }
                                            }
                                            {
                                              AddRow = TablePush;
                                            }
                                            {
                                              DeleteRow = TablePush;
                                            }
                                            {
                                              InsertRow = TablePush : mgiTable;
                                            }
                                            {
                                              EditOrder = toggle : mgiDataTypes;
                                              Group: Constraint
                                                leftAttachment = attach_widget;
                                                leftWidget = CopyColumn;
                                                rightAttachment = attach_none;
                                                topAttachment = attach_opposite_widget;
                                                topWidget = CopyColumn;
                                                bottomAttachment = attach_none;
                                                resizable = true;
                                            }
                                            {
                                              CopyColumn = TablePush : mgiTable;
                                              Group: Widget
                                                activateCallback = "D:CopyGelLaneColumn,\nD:GoHome";
                                                labelString = "Copy Column";
                                              Group: Constraint
                                                leftAttachment = attach_widget;
                                                leftWidget = InsertRow;
                                                rightAttachment = attach_none;
                                                topAttachment = attach_opposite_widget;
                                                topWidget = InsertRow;
                                                bottomAttachment = attach_none;
                                                resizable = true;
                                            }
                                      }
                                      {
                                        GelRow = TableLabel : mgiTable;
                                            {
                                              Table = mgiTable;
                                              Group: Control
                                                collapsed = False;
                                            }
                                      }
                                }
                          }
                    }
                    {
                      Control = Control;
                      Group: Constraint
                        leftAttachment = attach_widget;
                        rightAttachment = attach_form;
                        topAttachment = attach_widget;
                        topWidget = MainMenu;
                        bottomAttachment = attach_none;
                        resizable = true;
                        leftWidget = Edit;
                          {
                            ControlForm = XmForm;
                            Group: Widget
                              rubberPositioning = False;
                              resizePolicy = resize_any;
                                {
                                  Search = ControlPush;
                                }
                                {
                                  Clear = ControlPush;
                                  Group: Widget
                                    activateCallback = "D:ClearAssay";
                                }
                                {
                                  Modify = ControlPush;
                                }
                                {
                                  Add = ControlPush;
                                }
                                {
                                  Delete = ControlPush;
                                }
                                {
                                  DuplicatePrep = ControlPush : mgiControl;
                                  Group: Widget
                                    activateCallback = "D:VerifyEdit(mode = 4),\nD:DuplicateAssay(duplicate = 3),\nD:GoHome";
                                    labelString = "Duplicate Prep";
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = Search;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    topWidget = Search;
                                    topOffset = 2;
                                }
                                {
                                  DuplicatePartial = ControlPush : mgiControl;
                                  Group: Widget
                                    activateCallback = "D:VerifyEdit(mode = 4),\nD:DuplicateAssay(duplicate = 2),\nD:GoHome";
                                    labelString = Partial;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = DuplicatePrep;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    topWidget = DuplicatePrep;
                                }
                                {
                                  DuplicateAll = ControlPush : mgiControl;
                                  Group: Widget
                                    activateCallback = "D:VerifyEdit(mode = 4),\nD:DuplicateAssay(duplicate = 1),\nD:GoHome";
                                    labelString = All;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = DuplicatePartial;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    topWidget = DuplicatePartial;
                                    leftOffset = 2;
                                }
                                {
                                  AddToEditClipboard = ControlPush : mgiControl;
                                  Group: Widget
                                    activateCallback = "D:AddToEditClipboard";
                                    labelString = "Add Assay Structures To AD Clipboard";
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = DuplicatePrep;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    topWidget = DuplicatePrep;
                                    topOffset = 2;
                                }
                                {
                                  Previous = ControlArrow;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = RecordCount;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftWidget = RecordCount;
                                    leftOffset = 5;
                                    topOffset = 5;
                                }
                                {
                                  Next = ControlArrow;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = Previous;
                                    topOffset = 0;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftWidget = Previous;
                                    leftOffset = 5;
                                }
                                {
                                  Bottom = ControlArrow : mgiControl;
                                  Group: Constraint
                                    leftAttachment = attach_widget;
                                    leftWidget = Next;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_opposite_widget;
                                    topWidget = Next;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                    leftOffset = 5;
                                }
                                {
                                  Clear1 = XmMenuBar;
                                }
                                {
                                  RecordCount = RecordCount;
                                  Group: Constraint
                                    leftAttachment = attach_opposite_widget;
                                    leftWidget = AddToEditClipboard;
                                    rightAttachment = attach_none;
                                    topAttachment = attach_widget;
                                    topWidget = AddToEditClipboard;
                                    topOffset = 2;
                                    bottomAttachment = attach_none;
                                    resizable = true;
                                }
                                {
                                  CreationDate = CreationDate : mgiDataTypes;
                                  Group: Widget
                                    managed = False;
                                }
                                {
                                  ModifiedDate = ModifiedDate : mgiDataTypes;
                                  Group: Widget
                                    managed = False;
                                }
                                {
                                  ModificationHistory = ModificationHistory : mgiTable;
                                  Group: Widget
                                    managed = True;
                                }
                          }
                    }
                    {
                      Lookup = Lookup;
                      Group: Constraint
                        leftAttachment = attach_widget;
                        rightAttachment = attach_form;
                        topAttachment = attach_widget;
                        bottomAttachment = attach_form;
                        resizable = true;
                        topWidget = Control;
                        leftWidget = Edit;
                          {
                            panedWindow = XmPanedWindow;
                                {
                                  mgiAccessionTable = mgiAccessionTable : mgiTable;
                                      {
                                        Table = mgiTable;
                                        Group: Widget
                                          xrtTblVisibleRows = 1;
                                      }
                                      {
                                        Add = TablePush;
                                      }
                                      {
                                        Delete = TablePush;
                                      }
                                      {
                                        AccSourceMenu = AccSourceMenu;
                                        Group: Widget
                                          managed = False;
                                        Group: User
                                          defaultOption = MGI;
                                            Popups:
                                            {
                                              AccSourcePulldown = OptionPulldown;
                                                  {
                                                    MGI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MRK = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    J = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    PubMed = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    DXDOI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NSequence = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EnsemblGeneModel = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EnsemblProtein = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EnsemblTranscript = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RefSeq = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    SWISSPROT = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TrEMBL = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    VEGAGeneModel = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    VEGAProtein = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    VEGATranscript = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    AllenBrainAtlas = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Affy1 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Affy430 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    AffyU74 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ArrayExpress = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CCDS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    DFCI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    DOTS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    FuncBase = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HomoloGene = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    miRBase = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIAGeneIndex = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    PDB = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ProteinOntology = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENCluster = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENClone = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENFANTOM = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    UniGene = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    QTLArchive = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    InterPro = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IMAGE = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MGC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    WashU = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ATCC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MGIImage = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BGEM = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    GUDMAP = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CREX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HYEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    INEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    FSEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TEXT = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TXEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    PMEX = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    E = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HGNC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    OMIM = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RGD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIA = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIA7 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIA15K = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RPCI23 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RPCI24 = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    UniSTS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BROAD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    JRS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MMRRC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    APB = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BCBC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CARD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    CMMR = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EMMA = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EMS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Harwell = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    JPGA = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMP = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NCIMR = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MTG = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    MUGEN = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NIG = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NMICE = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    OBS = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ORNL = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RIKENBRC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TAC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RMRC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    WTSI = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IMAGELibrary = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    dbESTLibrary = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Taxon = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IGTC = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    LexiconGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    BayGenomicGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TexasGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    TIGEMGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ModellingHumanGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ESCDGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    ExchangeableClonesGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    GermanGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    SangerGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    HutchinsonGeneTrap = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPRegeneron = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPCSD = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RegeneronOther = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPRegeneronProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    KOMPCSDProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    NORCOMMProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EUCOMMProject = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Genentech = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EUCOMMCellLine = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    EUCOMMSequenceType = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    RuleyHECellLine = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    IshidaYCellLine = AccToggle : mgiOption;
                                                  }
                                                  {
                                                    Lexicon = AccToggle : mgiOption;
                                                  }
                                            }
                                      }
                                }
                                {
                                  QueryList = QueryList;
                                      {
                                        Label = LookupLabel;
                                      }
                                      {
                                        List = list;
                                        Group: Widget
                                          visibleItemCount = 8;
                                      }
                                }
                                {
                                  CVSpecimen = CVSpecimen : mgiCV;
                                      {
                                        panedWindow = XmPanedWindow;
                                            {
                                              GenotypeSpecimenClipboard = GenotypeSpecimenClipboard : mgiLookup;
                                            }
                                            {
                                              CVMenu = CVMenu;
                                            }
                                            {
                                              ADClipboard = ADClipboard : mgiLookup;
                                                  {
                                                    Label = LookupLabel;
                                                  }
                                                  {
                                                    List = list;
                                                    Group: User
                                                      targetWidget = Results;
                                                      targetKey = 4;
                                                      targetText = 8;
                                                  }
                                            }
                                      }
                                }
                                {
                                  CVGel = CVGel : mgiCV;
                                  Group: Widget
                                    managed = False;
                                }
                          }
                    }
                    Popups:
                    {
                      StatusDialog = StatusDialog;
                    }
                    {
                      DeleteDialog = DeleteDialog;
                    }
                    {
                      ReportDialog = ReportDialog;
                          {
                            FileSelection = FileSelection;
                          }
                          {
                            Lookup = XmFrame;
                                {
                                  panedWindow = XmPanedWindow;
                                      {
                                        ReportList = LookupList : mgiLookup;
                                      }
                                      {
                                        PrinterList = LookupList;
                                      }
                                      {
                                        PrintOrient = Choice : mgiDataTypes;
                                            {
                                              PrintOrientBox : ChoiceBox = XmRowColumn;
                                                  {
                                                    Portrait = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      set = True;
                                                      labelString = Portrait;
                                                  }
                                                  {
                                                    Landscape = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      labelString = Landscape;
                                                  }
                                            }
                                      }
                                      {
                                        PrintColumn = Choice : mgiDataTypes;
                                            {
                                              PrintColumnBox : ChoiceBox = XmRowColumn;
                                                  {
                                                    OneColumn = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      set = True;
                                                      labelString = "1 column";
                                                  }
                                                  {
                                                    TwoColumn = toggle : mgiDataTypes;
                                                    Group: Widget
                                                      labelString = "2 column";
                                                  }
                                            }
                                      }
                                }
                          }
                    }
                    {
                      SearchDialog = SearchDialog;
                    }
                    {
                      WhichItem = WhichItem;
                    }
                    {
                      VerifyItemAdd = VerifyItemAdd;
                    }
                    {
                      WorkingDialog = WorkingDialog;
                    }
                    {
                      NoteDialog = NoteDialog : mgiDialog;
                    }
                    {
                      InSituResultDialog = InSituResultDialog : mgiDialog;
                    }
                    {
                      NextRecordDialog = NextRecordDialog : mgiDialog;
                      Group: Widget
                        okCallback = "D:NextISResult";
                        cancelCallback = "D:NextISResult(answer = false)";
                    }
              }
        }
        {
          ProbePrepForm = EditForm : MGI;
          Group: Widget
            rubberPositioning = False;
            resizePolicy = resize_any;
          Group: Control
            vip_x = 175;
            vip_y = 250;
              {
                PrepID : ID = ID;
              }
              {
                label = XmLabel;
                Group: Widget
                  labelString = "Probe Prep";
                Group: Constraint
                  leftAttachment = attach_form;
                  leftOffset = 5;
                  rightAttachment = attach_none;
                  topAttachment = attach_form;
                  topOffset = 5;
                  bottomAttachment = attach_none;
                  resizable = true;
              }
              {
                PrepTypeMenu = PrepTypeMenu : mgiOption;
                Group: Constraint
                  leftAttachment = attach_opposite_widget;
                  leftWidget = label;
                  rightAttachment = attach_none;
                  topAttachment = attach_widget;
                  topWidget = label;
                  topOffset = 5;
                  bottomAttachment = attach_none;
                  resizable = true;
              }
              {
                SenseMenu = SenseMenu : mgiOption;
                Group: Constraint
                  leftAttachment = attach_widget;
                  leftWidget = PrepTypeMenu;
                  rightAttachment = attach_none;
                  topAttachment = attach_opposite_widget;
                  topWidget = PrepTypeMenu;
                  bottomAttachment = attach_none;
                  resizable = true;
                  leftOffset = 15;
              }
              {
                LabelTypeMenu = LabelMenu : mgiOption;
                Group: Constraint
                  leftAttachment = attach_opposite_widget;
                  leftWidget = PrepTypeMenu;
                  rightAttachment = attach_none;
                  topAttachment = attach_widget;
                  topWidget = PrepTypeMenu;
                  bottomAttachment = attach_none;
                  resizable = true;
                  topOffset = 5;
              }
              {
                VisualizationMenu = VisualizationMenu : mgiOption;
                Group: Constraint
                  leftAttachment = attach_opposite_widget;
                  leftWidget = LabelTypeMenu;
                  rightAttachment = attach_none;
                  topAttachment = attach_widget;
                  topWidget = LabelTypeMenu;
                  bottomAttachment = attach_form;
                  resizable = true;
                  topOffset = 5;
                  bottomOffset = 5;
              }
              {
                ProbeAccession = mgiAccession : mgiDataTypes;
                Group: Widget
                  userDefinedAttributes = "markerTableID:Int(Int)=\"133\"\n";
                Group: Constraint
                  leftAttachment = attach_widget;
                  leftWidget = SenseMenu;
                  rightAttachment = attach_none;
                  topAttachment = attach_opposite_widget;
                  topWidget = SenseMenu;
                  bottomAttachment = attach_none;
                  resizable = true;
                  leftOffset = 20;
                  topOffset = "-10";
                Group: User
                  tableID = 135;
                    {
                      ObjectID = ID;
                    }
                    {
                      AccessionID = CharText;
                          {
                            label = XmLabel;
                            Group: Widget
                              labelString = "Probe Accession ID";
                          }
                          {
                            text = text;
                            Group: Widget
                              translations = "#override
Shift<Key>Tab: prev-tab-group()
<Key>Tab: VerifyMGIAcc() VerifyProbePrep() VerifyMarkerInTable()";
                            Group: User
                              required = True;
                          }
                    }
                    {
                      AccessionName = CharSText;
                          {
                            label = XmLabel;
                            Group: Widget
                              labelString = "Probe Name";
                          }
                    }
              }
        }
        {
          AntibodyPrepForm = EditForm : MGI;
          Group: Widget
            managed = False;
            rubberPositioning = False;
            resizePolicy = resize_any;
          Group: Control
            vip_x = 60;
            vip_y = 195;
              {
                PrepID : ID = ID;
              }
              {
                label = XmLabel;
                Group: Widget
                  labelString = "Antibody Prep";
                Group: Constraint
                  leftAttachment = attach_form;
                  leftOffset = 5;
                  rightAttachment = attach_none;
                  topAttachment = attach_form;
                  topOffset = 5;
                  bottomAttachment = attach_none;
                  resizable = true;
              }
              {
                SecondaryMenu = SecondaryMenu : mgiOption;
                Group: Constraint
                  leftAttachment = attach_opposite_widget;
                  leftWidget = label;
                  rightAttachment = attach_none;
                  topAttachment = attach_widget;
                  topWidget = label;
                  topOffset = 5;
                  bottomAttachment = attach_none;
                  resizable = true;
              }
              {
                LabelTypeMenu = LabelMenu : mgiOption;
                Group: Constraint
                  leftAttachment = attach_widget;
                  leftWidget = SecondaryMenu;
                  rightAttachment = attach_none;
                  topAttachment = attach_opposite_widget;
                  topWidget = SecondaryMenu;
                  bottomAttachment = attach_none;
                  resizable = true;
                  leftOffset = 10;
              }
              {
                AntibodyAccession = mgiAccession : mgiDataTypes;
                Group: Widget
                  orientation = horizontal;
                  userDefinedAttributes = "markerTableID:Int=\"202\"\n";
                Group: Constraint
                  leftAttachment = attach_opposite_widget;
                  leftWidget = SecondaryMenu;
                  rightAttachment = attach_none;
                  topAttachment = attach_widget;
                  topWidget = SecondaryMenu;
                  topOffset = 5;
                  bottomAttachment = attach_none;
                  resizable = true;
                Group: User
                  tableID = 201;
                    {
                      ObjectID = ID;
                    }
                    {
                      AccessionID = CharText;
                          {
                            label = XmLabel;
                            Group: Widget
                              labelString = "Primary Antibody \nAccession ID";
                          }
                          {
                            text = text;
                            Group: Widget
                              translations = "#override
Shift<Key>Tab: prev-tab-group()
<Key>Tab: VerifyMGIAcc() VerifyMarkerInTable() VerifyWesternBlot()";
                          }
                    }
                    {
                      AccessionName = CharSText;
                          {
                            label = XmLabel;
                            Group: Widget
                              labelString = "Antibody Name";
                          }
                    }
              }
        }
        {
          KnockInForm = EditForm : MGI;
          Group: Widget
            rubberPositioning = False;
            resizePolicy = resize_any;
          Group: Control
            vip_x = 175;
            vip_y = 195;
              {
                ID = ID : mgiDataTypes;
              }
              {
                GXDReporterGeneMenu = GXDReporterGeneMenu : mgiOption;
                Group: Constraint
                  leftAttachment = attach_form;
                  rightAttachment = attach_none;
                  topAttachment = attach_form;
                  bottomAttachment = attach_none;
                  resizable = true;
              }
              {
                GXDKnockInMenu = GXDKnockInMenu : mgiOption;
                Group: Constraint
                  leftAttachment = attach_widget;
                  leftWidget = GXDReporterGeneMenu;
                  leftOffset = 5;
                  rightAttachment = attach_none;
                  topAttachment = attach_opposite_widget;
                  topWidget = GXDReporterGeneMenu;
                  bottomAttachment = attach_none;
                  resizable = true;
              }
        }
}

